/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/organisations/{orgId}/hubs/{hubId}/boards/{boardId}/users/{userId}": {
    /** @description Returns the user specified by the userId. */
    get: operations["GetUser"];
    /** @description Updates the given user. */
    put: operations["PutUser"];
    /** @description Create a new User. */
    post: operations["PostUser"];
    /** @description Delete a user. */
    delete: operations["DeleteUser"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      /**
       * @description The id of the user.
       * This needs to be provided when creating a user and must be unique for the board.
       * It must follow thw following regex \A[-/_=\.a-zA-Z0-9]+\z
       */
      id: string;
      environments?: components["schemas"]["Environments"][];
      variables?: {
        [key: string]: unknown;
      };
    };
    Environments: {
      /** @description Human identifier for the environment. Must be unique for the user. */
      key: string;
      credentialId: string;
      connectionId: string;
      /** @description The variables that will be used by the connection for this environment. */
      variables: Record<string, never>;
    };
    Error: {
      code: string;
      message: string;
      error: string;
    };
  };
  responses: {
    /** @description The default error response */
    ErrorResponse: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Responses for a User. */
    UserResponse: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
  };
  parameters: never;
  requestBodies: {
    /**
     * @description Payload for creating and updating a user.
     * On update the provided User overwrite the existing one.
     */
    CreateUser?: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description Returns the user specified by the userId. */
  GetUser: {
    parameters: {
      path: {
        orgId: string;
        hubId: string;
        boardId: string;
        userId: string;
      };
    };
    responses: {
      200: components["responses"]["UserResponse"];
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** @description Updates the given user. */
  PutUser: {
    parameters: {
      path: {
        orgId: string;
        hubId: string;
        boardId: string;
        userId: string;
      };
    };
    requestBody: components["requestBodies"]["CreateUser"];
    responses: {
      200: components["responses"]["UserResponse"];
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** @description Create a new User. */
  PostUser: {
    parameters: {
      path: {
        orgId: string;
        hubId: string;
        boardId: string;
        userId: string;
      };
    };
    requestBody: components["requestBodies"]["CreateUser"];
    responses: {
      200: components["responses"]["UserResponse"];
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** @description Delete a user. */
  DeleteUser: {
    parameters: {
      path: {
        orgId: string;
        hubId: string;
        boardId: string;
        userId: string;
      };
    };
    responses: {
      200: components["responses"]["UserResponse"];
      default: components["responses"]["ErrorResponse"];
    };
  };
}
