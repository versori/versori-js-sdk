openapi: 3.0.3
info:
  title: Hubs API
  description: The Hubs API provides the endpoints for users to use the hubs SDK.
  version: 0.0.1-alpha.0
servers:
  - url: 'https://platform.versori.com/apis/hubs-sdk'
    description: Production server
paths:
  /organisations/{orgId}/hubs/{hubId}/boards/{boardId}/users/{userId}:
    get:
      operationId: GetUser
      description: |
        Returns the user specified by the userId.
      tags:
        - users
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: hubId
          in: path
          required: true
          schema:
            type: string
        - name: boardId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      operationId: PostUser
      description: |
        Create a new User.
      tags:
        - users
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: hubId
          in: path
          required: true
          schema:
            type: string
        - name: boardId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    put:
      operationId: PutUser
      description: |
        Updates the given user.
      tags:
        - users
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: hubId
          in: path
          required: true
          schema:
            type: string
        - name: boardId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
    delete:
      operationId: DeleteUser
      description: |
        Delete a user.
      tags:
        - users
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
        - name: hubId
          in: path
          required: true
          schema:
            type: string
        - name: boardId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: |
            The id of the user.
            This needs to be provided when creating a user and must be unique for the board.
            It must follow thw following regex \A[-/_=\.a-zA-Z0-9]+\z
        environments:
          additionalProperties: true
          type: array
          x-go-type-skip-optional-pointer: true
          items:
            $ref: '#/components/schemas/Environments'
        variables:
          additionalProperties: true
          type: object
          x-go-type-skip-optional-pointer: true
      required:
        - id
    Environments:
      type: object
      properties:
        key:
          type: string
          description: Human identifier for the environment. Must be unique for the user.
        credentialId:
          type: string
        connectionId:
          type: string
        variables:
          type: object
          description: The variables that will be used by the connection for this environment.
          x-go-type-skip-optional-pointer: true
      required:
        - key
        - credentialId
        - connectionId
        - variables    
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        error:
          type: string
      required:
        - code
        - message
        - error
  requestBodies:
    CreateUser:
      description: |
        Payload for creating and updating a user.
        On update the provided User overwrite the existing one.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  responses:
    ErrorResponse:
      description: The default error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UserResponse:
      description: |
        Responses for a User.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
security:
  - apiKey: []
