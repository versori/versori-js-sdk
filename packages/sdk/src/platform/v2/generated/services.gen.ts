// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { ActivateUserData, ActivateUserError, ActivateUserResponse, ListProjectsData, ListProjectsError, ListProjectsResponse, CreateProjectData, CreateProjectError, CreateProjectResponse, GetProjectData, GetProjectError, GetProjectResponse, DeleteProjectData, DeleteProjectError, DeleteProjectResponse, UpdateProjectData, UpdateProjectError, UpdateProjectResponse, SetProjectVariablesSchemaData, SetProjectVariablesSchemaError, SetProjectVariablesSchemaResponse, PatchProjectVariablesSchemaData, PatchProjectVariablesSchemaError, PatchProjectVariablesSchemaResponse, GetFilesData, GetFilesError, GetFilesResponse, UpdateFilesData, UpdateFilesError, UpdateFilesResponse, DeployProjectData, DeployProjectError, DeployProjectResponse, GetProjectLogsData, GetProjectLogsError, GetProjectLogsResponse, SuspendProjectData, SuspendProjectError, SuspendProjectResponse, ListConnectionsData, ListConnectionsError, ListConnectionsResponse, CreateConnectionData, CreateConnectionError, CreateConnectionResponse, GetConnectionData, GetConnectionError, GetConnectionResponse, UpdateConnectionData, UpdateConnectionError, UpdateConnectionResponse, LinkConnectionToEnvironmentData, LinkConnectionToEnvironmentError, LinkConnectionToEnvironmentResponse, CreateEndUserData, CreateEndUserError, CreateEndUserResponse, ListEndUsersData, ListEndUsersError, ListEndUsersResponse, ListAutomationsData, ListAutomationsError, ListAutomationsResponse, CreateAutomationData, CreateAutomationError, CreateAutomationResponse, RunAutomationData, RunAutomationError, RunAutomationResponse, GetAutomationData, GetAutomationError, GetAutomationResponse, ListActivationsData, ListActivationsError, ListActivationsResponse, GetActivationData, GetActivationError, GetActivationResponse, DeleteActivationData, DeleteActivationError, DeleteActivationResponse, SetDynamicVariableData, SetDynamicVariableError, SetDynamicVariableResponse, ListUserActivationsData, ListUserActivationsError, ListUserActivationsResponse, GetEndUserData, GetEndUserError, GetEndUserResponse, DeleteEndUserData, DeleteEndUserError, DeleteEndUserResponse, GetActivationConnectionData, GetActivationConnectionError, GetActivationConnectionResponse, CreateSystemData, CreateSystemError, CreateSystemResponse, ListSystemsData, ListSystemsError, ListSystemsResponse, UpdateSystemData, UpdateSystemError, UpdateSystemResponse, DeleteAuthSchemeConfigData, DeleteAuthSchemeConfigError, DeleteAuthSchemeConfigResponse, UpsertAuthSchemeConfigData, UpsertAuthSchemeConfigError, UpsertAuthSchemeConfigResponse, ListEnvironmentConnectionsData, ListEnvironmentConnectionsError, ListEnvironmentConnectionsResponse, LinkSystemData, LinkSystemError, LinkSystemResponse, ListProjectSystemsData, ListProjectSystemsError, ListProjectSystemsResponse, UnlinkSystemData, UnlinkSystemError, UnlinkSystemResponse, CreateConnectionTemplateData, CreateConnectionTemplateError, CreateConnectionTemplateResponse, ListProjectConnectionTemplatesData, ListProjectConnectionTemplatesError, ListProjectConnectionTemplatesResponse, DeleteConnectionTemplateData, DeleteConnectionTemplateError, DeleteConnectionTemplateResponse, UpdateConnectionTemplateData, UpdateConnectionTemplateError, UpdateConnectionTemplateResponse, InitialiseOauth2ConnectionData, InitialiseOauth2ConnectionError, InitialiseOauth2ConnectionResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Activates a User on an Environment.
 * ActivateUser activates a user on an environment. This will create a new activation record for the user on the environment.
 * Connections must be made for all environment systems to be successfully activated.
 *
 */
export const activateUser = <ThrowOnError extends boolean = false>(options: Options<ActivateUserData, ThrowOnError>) => { return (options?.client ?? client).post<ActivateUserResponse, ActivateUserError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/activations'
}); };

/**
 * List projects for organisation
 */
export const listProjects = <ThrowOnError extends boolean = false>(options: Options<ListProjectsData, ThrowOnError>) => { return (options?.client ?? client).get<ListProjectsResponse, ListProjectsError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects'
}); };

/**
 * Create new project
 * CreateProject creates a new project.
 *
 */
export const createProject = <ThrowOnError extends boolean = false>(options: Options<CreateProjectData, ThrowOnError>) => { return (options?.client ?? client).post<CreateProjectResponse, CreateProjectError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects'
}); };

/**
 * Get Project
 * GetProject returns the files and configuration for the specified project ID. If one does not exist then a 404 will be returned.
 *
 */
export const getProject = <ThrowOnError extends boolean = false>(options: Options<GetProjectData, ThrowOnError>) => { return (options?.client ?? client).get<GetProjectResponse, GetProjectError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}'
}); };

/**
 * Delete Project
 * DeleteProject delete the project.
 *
 */
export const deleteProject = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteProjectResponse, DeleteProjectError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}'
}); };

/**
 * Update Project
 * UpdateProject updates the project record. This endpoint will not make changes to the file or the running deployment.
 *
 */
export const updateProject = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateProjectResponse, UpdateProjectError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}'
}); };

/**
 * Set the schema for the project variables
 * SetProjectVariablesSchema sets the JSON schema for the project's dynamic variables. Dynamic variables can then
 * be set by end users on activation. This schema is used to validate the variables when they are set and defines
 * the variables that can be set and used within the integration code.
 *
 */
export const setProjectVariablesSchema = <ThrowOnError extends boolean = false>(options: Options<SetProjectVariablesSchemaData, ThrowOnError>) => { return (options?.client ?? client).put<SetProjectVariablesSchemaResponse, SetProjectVariablesSchemaError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/variables'
}); };

/**
 * Patch the schema for the project's dynamic variables
 * PatchProjectVariablesSchema patches the JSON schema for the project's dynamic variables. This allows you to add,
 * remove or edit the schema for the project's dynamic variables.
 *
 */
export const patchProjectVariablesSchema = <ThrowOnError extends boolean = false>(options: Options<PatchProjectVariablesSchemaData, ThrowOnError>) => { return (options?.client ?? client).patch<PatchProjectVariablesSchemaResponse, PatchProjectVariablesSchemaError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/variables'
}); };

/**
 * Get Files
 * GetFiles returns the current files for the project. Those may not the the files the project is deployed with.
 *
 */
export const getFiles = <ThrowOnError extends boolean = false>(options: Options<GetFilesData, ThrowOnError>) => { return (options?.client ?? client).get<GetFilesResponse, GetFilesError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/files'
}); };

/**
 * Update Files
 * UpdateFiles updates the files for the project. This will not deploy the project.
 *
 */
export const updateFiles = <ThrowOnError extends boolean = false>(options: Options<UpdateFilesData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateFilesResponse, UpdateFilesError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/files'
}); };

/**
 * Deploy Project
 * DeployProject deploys the project to the specified environment using the current files.
 * It processes the files to deploy a new version of the project and updates the underlying connector
 * to integrate the new API.
 *
 */
export const deployProject = <ThrowOnError extends boolean = false>(options: Options<DeployProjectData, ThrowOnError>) => { return (options?.client ?? client).put<DeployProjectResponse, DeployProjectError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/deploy'
}); };

/**
 * Get Project Logs
 */
export const getProjectLogs = <ThrowOnError extends boolean = false>(options: Options<GetProjectLogsData, ThrowOnError>) => { return (options?.client ?? client).get<GetProjectLogsResponse, GetProjectLogsError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/logs'
}); };

/**
 * Suspend Project
 * Suspend project will stop the project but not delete it. It can be deployed later again.
 */
export const suspendProject = <ThrowOnError extends boolean = false>(options: Options<SuspendProjectData, ThrowOnError>) => { return (options?.client ?? client).post<SuspendProjectResponse, SuspendProjectError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/suspend'
}); };

/**
 * List Connections
 * ListConnections returns a list of Connections.
 *
 */
export const listConnections = <ThrowOnError extends boolean = false>(options: Options<ListConnectionsData, ThrowOnError>) => { return (options?.client ?? client).get<ListConnectionsResponse, ListConnectionsError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/connections'
}); };

/**
 * Create a new connection.
 * CreateConnection creates a new connection for the given organisation.
 *
 */
export const createConnection = <ThrowOnError extends boolean = false>(options: Options<CreateConnectionData, ThrowOnError>) => { return (options?.client ?? client).post<CreateConnectionResponse, CreateConnectionError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/connections'
}); };

/**
 * Get a Connection by ID
 * GetConnection returns the Connection for the given connection ID.
 *
 */
export const getConnection = <ThrowOnError extends boolean = false>(options: Options<GetConnectionData, ThrowOnError>) => { return (options?.client ?? client).get<GetConnectionResponse, GetConnectionError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/connections/{connection_id}'
}); };

/**
 * Update a Connection by ID
 * UpdateConnection updates the Connection for the given connection ID.
 *
 */
export const updateConnection = <ThrowOnError extends boolean = false>(options: Options<UpdateConnectionData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateConnectionResponse, UpdateConnectionError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/connections/{connection_id}'
}); };

/**
 * Link an existing connection to an environment
 * LinkConnectionToEnvironment links an existing connection to a specified environment.
 *
 */
export const linkConnectionToEnvironment = <ThrowOnError extends boolean = false>(options: Options<LinkConnectionToEnvironmentData, ThrowOnError>) => { return (options?.client ?? client).post<LinkConnectionToEnvironmentResponse, LinkConnectionToEnvironmentError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/connections/{connection_id}/link'
}); };

/**
 * Create an End User
 * CreateEndUser creates a new End User for the given organisation.
 *
 * The end user requires a unique `externalId`. This is an immutable field so should not be set to something that may change
 * such as an email address.
 *
 */
export const createEndUser = <ThrowOnError extends boolean = false>(options: Options<CreateEndUserData, ThrowOnError>) => { return (options?.client ?? client).post<CreateEndUserResponse, CreateEndUserError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/users'
}); };

/**
 * List End Users
 * ListEndUsers returns a list of all the End Users for the given organisation.
 *
 */
export const listEndUsers = <ThrowOnError extends boolean = false>(options: Options<ListEndUsersData, ThrowOnError>) => { return (options?.client ?? client).get<ListEndUsersResponse, ListEndUsersError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/users'
}); };

/**
 * List Automations
 * ListAutomations returns a list of all the Automations for the given organisation.
 *
 */
export const listAutomations = <ThrowOnError extends boolean = false>(options: Options<ListAutomationsData, ThrowOnError>) => { return (options?.client ?? client).get<ListAutomationsResponse, ListAutomationsError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/automations'
}); };

/**
 * Create a new automation.
 */
export const createAutomation = <ThrowOnError extends boolean = false>(options: Options<CreateAutomationData, ThrowOnError>) => { return (options?.client ?? client).post<CreateAutomationResponse, CreateAutomationError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/automations'
}); };

/**
 * Run an Automation
 */
export const runAutomation = <ThrowOnError extends boolean = false>(options: Options<RunAutomationData, ThrowOnError>) => { return (options?.client ?? client).post<RunAutomationResponse, RunAutomationError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/automations/{automation_id}/run'
}); };

/**
 * Get an Automation by ID
 * GetAutomation returns the Automation for the given automation ID.
 *
 */
export const getAutomation = <ThrowOnError extends boolean = false>(options: Options<GetAutomationData, ThrowOnError>) => { return (options?.client ?? client).get<GetAutomationResponse, GetAutomationError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/automations/{automation_id}'
}); };

/**
 * List Activations
 * ListActivations returns a list of all the Activations for the given environment.
 *
 */
export const listActivations = <ThrowOnError extends boolean = false>(options: Options<ListActivationsData, ThrowOnError>) => { return (options?.client ?? client).get<ListActivationsResponse, ListActivationsError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/environments/{environment_id}/activations'
}); };

/**
 * Retrieve an Activation by ID
 * GetActivation returns the Activation for the given activation ID.
 *
 */
export const getActivation = <ThrowOnError extends boolean = false>(options: Options<GetActivationData, ThrowOnError>) => { return (options?.client ?? client).get<GetActivationResponse, GetActivationError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/environments/{environment_id}/activations/{activation_id}'
}); };

/**
 * Delete an Activation
 * DeleteActivation deletes the Activation for the given activation ID.
 *
 */
export const deleteActivation = <ThrowOnError extends boolean = false>(options: Options<DeleteActivationData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteActivationResponse, DeleteActivationError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/environments/{environment_id}/activations/{activation_id}'
}); };

/**
 * Set a dynamic variable by name
 * Updates a single dynamic variable identified by name for the specified activation.
 * This endpoint is designed to support the SDK's ability to update individual variables
 * with a friendly, descriptive API for error handling.
 *
 */
export const setDynamicVariable = <ThrowOnError extends boolean = false>(options: Options<SetDynamicVariableData, ThrowOnError>) => { return (options?.client ?? client).put<SetDynamicVariableResponse, SetDynamicVariableError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/environments/{environment_id}/activations/{activation_id}/variables/{variable_name}'
}); };

/**
 * List Activations for User
 * ListUserActivations returns an array of all activations for a specific user in a given environment.
 *
 */
export const listUserActivations = <ThrowOnError extends boolean = false>(options: Options<ListUserActivationsData, ThrowOnError>) => { return (options?.client ?? client).get<ListUserActivationsResponse, ListUserActivationsError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/environment/{environment_id}/users/{external_user_id}/activations'
}); };

/**
 * Retrieve an End User
 * GetEndUser returns the End User for the given user ID.
 *
 */
export const getEndUser = <ThrowOnError extends boolean = false>(options: Options<GetEndUserData, ThrowOnError>) => { return (options?.client ?? client).get<GetEndUserResponse, GetEndUserError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/users/{user_id}'
}); };

/**
 * Delete an End User
 * DeleteEndUser deletes the End User for the given user ID.
 *
 */
export const deleteEndUser = <ThrowOnError extends boolean = false>(options: Options<DeleteEndUserData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteEndUserResponse, DeleteEndUserError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/users/{user_id}'
}); };

/**
 * Retrieve the connection for the activations.
 */
export const getActivationConnection = <ThrowOnError extends boolean = false>(options: Options<GetActivationConnectionData, ThrowOnError>) => { return (options?.client ?? client).get<GetActivationConnectionResponse, GetActivationConnectionError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/environment-systems/{env_system_id}/activations/{activation_id}'
}); };

/**
 * Create a new system.
 */
export const createSystem = <ThrowOnError extends boolean = false>(options: Options<CreateSystemData, ThrowOnError>) => { return (options?.client ?? client).post<CreateSystemResponse, CreateSystemError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/systems'
}); };

/**
 * Lists the systems for the organisation.
 */
export const listSystems = <ThrowOnError extends boolean = false>(options: Options<ListSystemsData, ThrowOnError>) => { return (options?.client ?? client).get<ListSystemsResponse, ListSystemsError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/systems'
}); };

/**
 * Update system.
 */
export const updateSystem = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateSystemResponse, UpdateSystemError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/systems/{system_id}'
}); };

/**
 * Deletes an auth scheme for the system.
 */
export const deleteAuthSchemeConfig = <ThrowOnError extends boolean = false>(options: Options<DeleteAuthSchemeConfigData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteAuthSchemeConfigResponse, DeleteAuthSchemeConfigError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/systems/{system_id}/auth-scheme-configs/{auth_scheme_config_id}'
}); };

/**
 * Adds or updates an auth scheme for the system.
 * UpsertAuthSchemeConfig adds or updates an auth scheme for the system.
 * If the auth scheme ID provided doesn't match any of the record, it will be created.
 * If the auth scheme ID provided matches an existing record, it will be updated.
 * The ID in the path needs to match the ID in the body.
 *
 */
export const upsertAuthSchemeConfig = <ThrowOnError extends boolean = false>(options: Options<UpsertAuthSchemeConfigData, ThrowOnError>) => { return (options?.client ?? client).put<UpsertAuthSchemeConfigResponse, UpsertAuthSchemeConfigError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/systems/{system_id}/auth-scheme-configs/{auth_scheme_config_id}'
}); };

/**
 * List static connections for project environment
 * Lists all static connections (connections without end users) for a given environment.
 *
 */
export const listEnvironmentConnections = <ThrowOnError extends boolean = false>(options: Options<ListEnvironmentConnectionsData, ThrowOnError>) => { return (options?.client ?? client).get<ListEnvironmentConnectionsResponse, ListEnvironmentConnectionsError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/connections'
}); };

/**
 * Add a system to a project environment
 */
export const linkSystem = <ThrowOnError extends boolean = false>(options: Options<LinkSystemData, ThrowOnError>) => { return (options?.client ?? client).post<LinkSystemResponse, LinkSystemError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/systems'
}); };

/**
 * List the systems linked to the project environment.
 */
export const listProjectSystems = <ThrowOnError extends boolean = false>(options: Options<ListProjectSystemsData, ThrowOnError>) => { return (options?.client ?? client).get<ListProjectSystemsResponse, ListProjectSystemsError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/systems'
}); };

/**
 * Remove a system from a project environment
 */
export const unlinkSystem = <ThrowOnError extends boolean = false>(options: Options<UnlinkSystemData, ThrowOnError>) => { return (options?.client ?? client).delete<UnlinkSystemResponse, UnlinkSystemError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/systems'
}); };

/**
 * Create a new connection template
 */
export const createConnectionTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateConnectionTemplateData, ThrowOnError>) => { return (options?.client ?? client).post<CreateConnectionTemplateResponse, CreateConnectionTemplateError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/connection-templates'
}); };

/**
 * List project environment connection templates
 */
export const listProjectConnectionTemplates = <ThrowOnError extends boolean = false>(options: Options<ListProjectConnectionTemplatesData, ThrowOnError>) => { return (options?.client ?? client).get<ListProjectConnectionTemplatesResponse, ListProjectConnectionTemplatesError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/connection-templates'
}); };

/**
 * Remove a connection template
 */
export const deleteConnectionTemplate = <ThrowOnError extends boolean = false>(options: Options<DeleteConnectionTemplateData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteConnectionTemplateResponse, DeleteConnectionTemplateError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/connection-templates/{template_id}'
}); };

/**
 * Remove a system from a project environment
 */
export const updateConnectionTemplate = <ThrowOnError extends boolean = false>(options: Options<UpdateConnectionTemplateData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateConnectionTemplateResponse, UpdateConnectionTemplateError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/projects/{project_id}/connection-templates/{template_id}'
}); };

/**
 * Initialise OAuth 2.0 Connection
 * InitialiseOAuth2Connection returns a URL to redirect the user to an OAuth 2.0 Provider's Authorize endpoint.
 *
 * Only URLs constructed via this API can be used to connect to an OAuth 2.0 connector within
 * Versori, since a `state` parameter is generated and validated upon redirection to the
 * redirect_uri.
 *
 * Additional query parameters can be added to the resultant URL via the `additionalParams`
 * property in the body. In addition to the standard parameters defined in the body, this API
 * adds the following parameters:
 *
 * - `redirect_uri`: The URI to redirect the user to after the OAuth 2.0 Provider has
 * authenticated the user.
 * - `state`: A secure string generated by the API to authenticate requests to the redirect URI.
 * - `prompt`: See documentation on the `prompt` property of the request body.
 * - `scope`: See documentation on the `scopes` property of the request body.
 * - `response_type`: The response type to use. This is always `code` for OAuth 2.0.
 * - `client_id`: The client ID provided by the request body, this must match the client ID
 * which is stored under the provided `credentialId` otherwise the handling of the redirect
 * request will fail.
 *
 * Full details on the standard parameters can be found in the OIDC Core specification:
 * https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
 *
 */
export const initialiseOauth2Connection = <ThrowOnError extends boolean = false>(options: Options<InitialiseOauth2ConnectionData, ThrowOnError>) => { return (options?.client ?? client).post<InitialiseOauth2ConnectionResponse, InitialiseOauth2ConnectionError, ThrowOnError>({
    ...options,
    url: '/o/{organisation_id}/systems/{system_id}/oauth2/initialise'
}); };