openapi: 3.1.0
info:
  title: Versori Platform API
  version: 0.0.1
  license:
    name: UNLICENSED
servers:
  - description: Production
    url: https://platform.versori.com/api/v2
  - description: Staging
    url: https://platform-staging.versori.com/api/v2
  - description: Development
    url: http://localhost:8901
paths:
  /o/{organisation_id}/activations:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
    post:
      operationId: ActivateUser
      summary: Activates a User on an Environment.
      description: |
        ActivateUser activates a user on an environment. This will create a new activation record for the user on the environment.
        Connections must be made for all environment systems to be successfully activated.
      tags:
        - projects
        - end_users
        - environments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivationCreate'

  /o/{organisation_id}/projects:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
    get:
      operationId: ListProjects
      summary: List projects for organisation
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsList'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: CreateProject
      summary: Create new project
      description: |
        CreateProject creates a new project.
      tags:
        - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/projects/{project_id}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'

    get:
      operationId: GetProject
      summary: Get Project
      description: |
        GetProject returns the files and configuration for the specified project ID. If one does not exist then a 404 will be returned.
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      operationId: DeleteProject
      summary: Delete Project
      description: |
        DeleteProject delete the project.
      tags:
        - projects
      responses:
        '204':
          description: OK
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: UpdateProject
      summary: Update Project
      description: |
        UpdateProject updates the project record. This endpoint will not make changes to the file or the running deployment.
      tags:
        - projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/projects/{project_id}/variables:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'
    put:
      operationId: SetProjectVariablesSchema
      summary: Set the schema for the project variables
      description: |
        SetProjectVariablesSchema sets the JSON schema for the project's dynamic variables. Dynamic variables can then
        be set by end users on activation. This schema is used to validate the variables when they are set and defines
        the variables that can be set and used within the integration code.
      tags:
        - projects
        - variables
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicVariablesSchema'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicVariablesSchema'

        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      operationId: PatchProjectVariablesSchema
      summary: Patch the schema for the project's dynamic variables
      description: |
        PatchProjectVariablesSchema patches the JSON schema for the project's dynamic variables. This allows you to add,
        remove or edit the schema for the project's dynamic variables.
      tags:
        - projects
        - variables
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicVariablesSchemaPatch'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicVariablesSchema'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/projects/{project_id}/files:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'
    get:
      operationId: GetFiles
      summary: Get Files
      description: |
        GetFiles returns the current files for the project. Those may not the the files the project is deployed with.
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Files'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: UpdateFiles
      summary: Update Files
      description: |
        UpdateFiles updates the files for the project. This will not deploy the project.
      tags:
        - projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Files'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Files'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/projects/{project_id}/deploy:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/project_env'
      - $ref: '#/components/parameters/env_id'
    put:
      operationId: DeployProject
      summary: Deploy Project
      description: |
        DeployProject deploys the project to the specified environment using the current files.
        It processes the files to deploy a new version of the project and updates the underlying connector
        to integrate the new API.
      tags:
        - projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Files'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/projects/{project_id}/logs:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/project_env'
      - name: next_token
        in: query
        required: false
        schema:
          type: string
      - name: start
        in: query
        required: false
        schema:
          type: string
      - name: end
        in: query
        required: false
        schema:
          type: string
      - name: build
        in: query
        required: false
        schema:
          type: boolean
      - name: latest
        in: query
        required: false
        schema:
          type: boolean
          description: If true, returns only the latest logs
    get:
      operationId: GetProjectLogs
      summary: Get Project Logs
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/projects/{project_id}/suspend:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'
      - name: environment
        in: query
        required: true
        schema:
          type: string
          description: The environment to suspend the project in.
    post:
      operationId: SuspendProject
      summary: Suspend Project
      description: Suspend project will stop the project but not delete it. It can be deployed later again.
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/connections:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
    get:
      operationId: ListConnections
      summary: List Connections
      description: |
        ListConnections returns a list of Connections.
      tags:
        - connections
      parameters:
        - $ref: '#/components/parameters/first'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        - name: system_id
          in: query
          required: false
          schema:
            type: string
        - name: end_user_id
          in: query
          required: false
          schema:
            type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionPage'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: CreateConnection
      summary: Create a new connection.
      description: |
        CreateConnection creates a new connection for the given organisation.
      tags:
        - connections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvSystemConnectionCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/connections/{connection_id}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/connection_id'
    get:
      operationId: GetConnection
      summary: Get a Connection by ID
      description: |
        GetConnection returns the Connection for the given connection ID.
      tags:
        - connections
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: UpdateConnection
      summary: Update a Connection by ID
      description: |
        UpdateConnection updates the Connection for the given connection ID.
      tags:
        - connections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'

        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/connections/{connection_id}/link:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/connection_id'
    post:
      operationId: LinkConnectionToEnvironment
      summary: Link an existing connection to an environment
      description: |
        LinkConnectionToEnvironment links an existing connection to a specified environment.
      tags:
        - connections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkConnectionEnvironment'
      responses:
        '201':
          description: Created
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/users:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
    post:
      operationId: CreateEndUser
      summary: Create an End User
      description: |
        CreateEndUser creates a new End User for the given organisation.

        The end user requires a unique `externalId`. This is an immutable field so should not be set to something that may change
        such as an email address.
      tags:
        - end_users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndUserCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUser'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      operationId: ListEndUsers
      summary: List End Users
      description: |
        ListEndUsers returns a list of all the End Users for the given organisation.
      tags:
        - end_users
      parameters:
        - name: search
          in: query
          description: |
            Search is a string that is used to filter the list of End Users. The search string is matched against the
            id, externalId and displayName fields.
          schema:
            type: string
        - name: activated
          in: query
          description: |
            Filter users by their activation status. Must be used together with environment_id.
            If not provided, returns all users regardless of activation status.
          schema:
            type: boolean
        - name: environment_id
          in: query
          description: |
            Filter users by activations in a specific environment. Must be used together with the 'activated' parameter.
            When combined with 'activated=true', it returns users that are activated in the specified environment.
            When combined with 'activated=false', it returns users that are not activated in this specific environment.
            If not provided, returns users from all environments.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUserPage'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/automations:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
    get:
      operationId: ListAutomations
      summary: List Automations
      description: |
        ListAutomations returns a list of all the Automations for the given organisation.
      tags:
        - automations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Automation'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: CreateAutomation
      summary: Create a new automation.
      tags:
        - automations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Automation'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/automations/{automation_id}/run:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/automation_id'
    post:
      operationId: RunAutomation
      summary: Run an Automation
      tags:
        - automations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationRun'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationRunResponse'
  /o/{organisation_id}/automations/{automation_id}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/automation_id'
    get:
      operationId: GetAutomation
      summary: Get an Automation by ID
      description: |
        GetAutomation returns the Automation for the given automation ID.
      tags:
        - automations
      parameters:
        - $ref: '#/components/parameters/automation_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Automation'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/environments/{environment_id}/activations:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/environment_id'
    get:
      operationId: ListActivations
      summary: List Activations
      description: |
        ListActivations returns a list of all the Activations for the given environment.
      tags:
        - activations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/environments/{environment_id}/activations/{activation_id}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/environment_id'
      - $ref: '#/components/parameters/activation_id'
    get:
      operationId: GetActivation
      summary: Retrieve an Activation by ID
      description: |
        GetActivation returns the Activation for the given activation ID.
      tags:
        - activations
        - internal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: DeleteActivation
      summary: Delete an Activation
      description: |
        DeleteActivation deletes the Activation for the given activation ID.
      tags:
        - activations
      responses:
        '204':
          description: No Content
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/environments/{environment_id}/activations/{activation_id}/variables/{variable_name}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/environment_id'
      - $ref: '#/components/parameters/activation_id'
      - name: variable_name
        in: path
        required: true
        schema:
          type: string
        description: The name of the dynamic variable to update
    put:
      operationId: SetDynamicVariable
      summary: Set a dynamic variable by name
      description: |
        Updates a single dynamic variable identified by name for the specified activation.
        This endpoint is designed to support the SDK's ability to update individual variables
        with a friendly, descriptive API for error handling.
      tags:
        - activations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  description: The new value for the variable (can be any JSON type)
                  type: ['object', 'array', 'string', 'number', 'boolean']
                  x-go-type: any
              required:
                - value
      responses:
        '200':
          description: Variable updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicVariables'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/environment/{environment_id}/users/{external_user_id}/activations:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/environment_id'
      - name: external_user_id
        in: path
        required: true
        schema:
          type: string
        description: The external ID of the user
    get:
      operationId: ListUserActivations
      summary: List Activations for User
      description: |
        ListUserActivations returns an array of all activations for a specific user in a given environment.
      tags:
        - activations
        - end_users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activation'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - name: user_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the user
    get:
      operationId: GetEndUser
      summary: Retrieve an End User
      description: |
        GetEndUser returns the End User for the given user ID.
      tags:
        - end_users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUser'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: DeleteEndUser
      summary: Delete an End User
      description: |
        DeleteEndUser deletes the End User for the given user ID.
      tags:
        - end_users
      responses:
        '204':
          description: No Content
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/environment-systems/{env_system_id}/activations/{activation_id}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/env_system_id'
      - name: activation_id
        in: path
        required: true
        schema:
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: EnvSystemID
          x-go-type-import:
            path: versori.dev/vergo/ulid
    get:
      operationId: GetActivationConnection
      summary: Retrieve the connection for the activations.
      tags:
        - connections
        - end_users
        - internal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'

  /o/{organisation_id}/systems:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
    post:
      operationId: CreateSystem
      summary: Create a new system.
      tags:
        - systems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      operationId: ListSystems
      summary: Lists the systems for the organisation.
      tags:
        - systems
      parameters:
        - $ref: '#/components/parameters/first'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemPage'

  /o/{organisation_id}/systems/{system_id}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - name: system_id
        in: path
        required: true
        schema:
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: SystemID
          x-go-type-import:
            path: versori.dev/vergo/ulid
    put:
      operationId: UpdateSystem
      summary: Update system.
      tags:
        - systems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSystem'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/systems/{system_id}/auth-scheme-configs/{auth_scheme_config_id}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/system_id'
      - name: auth_scheme_config_id
        in: path
        required: true
        schema:
          type: string

    delete:
      operationId: DeleteAuthSchemeConfig
      summary: Deletes an auth scheme for the system.
      tags:
        - systems
      responses:
        '204':
          description: No Content
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      operationId: UpsertAuthSchemeConfig
      summary: Adds or updates an auth scheme for the system.
      description: |
        UpsertAuthSchemeConfig adds or updates an auth scheme for the system.
        If the auth scheme ID provided doesn't match any of the record, it will be created.
        If the auth scheme ID provided matches an existing record, it will be updated.
        The ID in the path needs to match the ID in the body.
      tags:
        - systems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthSchemeConfig'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSchemeConfig'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/projects/{project_id}/connections:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'
    get:
      operationId: ListEnvironmentConnections
      summary: List static connections for project environment
      description: |
        Lists all static connections (connections without end users) for a given environment.
      tags:
        - connections
        - projects
      parameters:
        - $ref: '#/components/parameters/env_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionPage'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/projects/{project_id}/systems:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'
    post:
      operationId: LinkSystem
      summary: Add a system to a project environment
      tags:
        - systems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkSystem'
      responses:
        '204':
          description: OK
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      operationId: ListProjectSystems
      summary: List the systems linked to the project environment.
      tags:
        - systems
      parameters:
        - $ref: '#/components/parameters/env_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentSystemPage'

    delete:
      operationId: UnlinkSystem
      summary: Remove a system from a project environment
      tags:
        - systems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkSystem'
      responses:
        '204':
          description: OK

  /o/{organisation_id}/projects/{project_id}/connection-templates:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'
    post:
      operationId: CreateConnectionTemplate
      summary: Create a new connection template
      tags:
        - systems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkSystem'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionTemplate'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      operationId: ListProjectConnectionTemplates
      summary: List project environment connection templates
      tags:
        - systems
      parameters:
        - $ref: '#/components/parameters/env_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentSystemPage'

  /o/{organisation_id}/projects/{project_id}/connection-templates/{template_id}:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/project_id'
      - name: template_id
        in: path
        required: true
        schema:
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: EnvironmentSystemID
          x-go-type-import:
            path: versori.dev/vergo/ulid

    delete:
      operationId: DeleteConnectionTemplate
      summary: Remove a connection template
      tags:
        - systems
      responses:
        '204':
          description: OK
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      operationId: UpdateConnectionTemplate
      summary: Remove a system from a project environment
      tags:
        - systems
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnectionTemplate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionTemplate'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /o/{organisation_id}/systems/{system_id}/oauth2/initialise:
    parameters:
      - $ref: '#/components/parameters/organisation_id'
      - $ref: '#/components/parameters/system_id'
    post:
      operationId: InitialiseOAuth2Connection
      summary: Initialise OAuth 2.0 Connection
      description: |
        InitialiseOAuth2Connection returns a URL to redirect the user to an OAuth 2.0 Provider's Authorize endpoint.

        Only URLs constructed via this API can be used to connect to an OAuth 2.0 connector within
        Versori, since a `state` parameter is generated and validated upon redirection to the
        redirect_uri.

        Additional query parameters can be added to the resultant URL via the `additionalParams`
        property in the body. In addition to the standard parameters defined in the body, this API
        adds the following parameters:

        - `redirect_uri`: The URI to redirect the user to after the OAuth 2.0 Provider has
          authenticated the user.
        - `state`: A secure string generated by the API to authenticate requests to the redirect URI.
        - `prompt`: See documentation on the `prompt` property of the request body.
        - `scope`: See documentation on the `scopes` property of the request body.
        - `response_type`: The response type to use. This is always `code` for OAuth 2.0.
        - `client_id`: The client ID provided by the request body, this must match the client ID
          which is stored under the provided `credentialId` otherwise the handling of the redirect
          request will fail.

        Full details on the standard parameters can be found in the OIDC Core specification:
        https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      tags:
        - connections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitialiseOAuth2ConnectionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialiseOAuth2ConnectionResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - bearerToken: []
  - cookie: []
components:
  schemas:
    Activation:
      type: object
      properties:
        id:
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-type-skip-optional-pointer: true
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-name: ID
        user:
          $ref: '#/components/schemas/EndUser'
        environment:
          $ref: '#/components/schemas/ProjectEnvironment'
        connections:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
        dynamicVariables:
          $ref: '#/components/schemas/DynamicVariables'
      required:
        - id
        - user

    ActivationCreate:
      description: |
        ActivationCreate is the request payload to activate an environment for End User
      type: object
      properties:
        userId:
          type: string
          description: This userID could be the id or the external_id of the user that is being activated.
          x-go-name: userID
        environmentId:
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: environmentID
          x-go-type-skip-optional-pointer: true
          x-go-type-import:
            path: versori.dev/vergo/ulid
        connections:
          type: array
          items:
            type: object
            properties:
              connectionTemplateId:
                $ref: '#/components/schemas/TemplateID'
              connection:
                $ref: '#/components/schemas/ConnectionCreate'
              existingConnectionId:
                description: The id of an existing connection to be linked to the environment. If 'connection' is provided, this field is ignored.
                type: string
                format: ulid
                x-go-type: ulid.ULID
                x-go-name: existingConnectionID
                x-go-type-import:
                  path: versori.dev/vergo/ulid
            required:
              - connectionTemplateId
        dynamicVariables:
          $ref: '#/components/schemas/DynamicVariables'
      required:
        - userId
        - environmentId
        - connections

    ConnectionCreate:
      description: ConnectionCreate defines the connection to create.
      type: object
      properties:
        name:
          type: string
          description: Name is the name of the Connection.
        credentials:
          $ref: '#/components/schemas/ConnectionCredentialsCreate'
        variables:
          type: array
          items:
            $ref: '#/components/schemas/ConnectionVariable'
        baseUrl:
          type: string
          format: uri
          description: |
            BaseURL is the base URL for the connection. This allows you to override the baseURL for the system being connected to.
            An example is where the system's baseURL is https://shopifyplaceholder.com and you want to connect to your own shopify
            which is at https://myshopify.com. Everything after the top-level domain will be ignored. If the scheme is missing, then
            https:// will be used.
          x-go-name: BaseURL
          x-go-type-skip-optional-pointer: true
      required:
        - name
        - credentials
        - variables

    EnvSystemConnectionCreate:
      type: object
      properties:
        connectionTemplateId:
          $ref: '#/components/schemas/TemplateID'
        connection:
          $ref: '#/components/schemas/ConnectionCreate'
      required:
        - connectionTemplateId
        - connection

    LinkConnectionEnvironment:
      type: object
      description: |
        LinkConnectionEnvironment is the request payload to link an existing connection to an environment.
      properties:
        connectionTemplateId:
          $ref: '#/components/schemas/TemplateID'
      required:
        - connectionTemplateId

    ProjectCreate:
      description: ProjectCreate is the request body for creating a new Project.
      type: object
      properties:
        name:
          type: string
          description: Name is the name of the project.
        id:
          type: string
          description: The unique identifier for the project.
          format: ulid
          x-go-name: ID
          x-go-type: ulid.ULID
          x-go-type-skip-optional-pointer: true
          x-go-type-import:
            path: versori.dev/vergo/ulid
      required:
        - name

    ProjectUpdate:
      description: ProjectUpdate is the request body for updating a Project.
      type: object
      properties:
        name:
          type: string
          description: Name is the name of the project.
      required:
        - name

    ProjectsList:
      description: ProjectsList is the response body for listing all projects.
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSummary'
      required:
        - projects

    ProjectSummary:
      description: |
        The Project represents a deployable unit within our platform that includes both the functional components (files) and configuration. It serves as the backbone of custom or predefined functionalities, allowing organizations to create, update, and manage APIs and projects.
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the project.
          format: ulid
          x-go-name: ID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        environments:
          type: array
          description: |
            List of environments for the project.
          items:
            $ref: '#/components/schemas/ProjectEnvironment'
          x-go-type-skip-optional-pointer: true
      required:
        - id
        - name
        - createdAt
        - environments

    DynamicVariablesSchema:
      description: |
        DynamicVariablesSchema is the JSON schema for the project's dynamic variables.
      type: object
      x-go-type-skip-optional-pointer: true
      x-go-type: json.RawMessage

    DynamicVariablesSchemaPatch:
      description: |
        DynamicVariablesSchemaPatch is the request body for updating the project's dynamic variables.
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - remove
            - replace
        path:
          type: string
          description: |
            The path to the field to update. This should be a JSON path to the field to update. For example, if you want
            to update/remove the dynamic variables `newVar` in the following schema:

            ```
            {
              "type": "object",
              "properties": {
                "newVar": {
                  "type": "string"
                }
              }
            }
            ```

            The path would be `/properties/newVar`.
        value:
          type: object
          x-go-type: json.RawMessage
          description: |
            The value to set the field to. This should be valid JSON schema containing the name of the variable, its type
            and any other properties. An example would be `{"newVar": {"type": "string"}}`.
      required:
        - op
        - path

    Project:
      description: |
        The Project represents a deployable unit within our platform that includes both the functional components (files) and configuration. It serves as the backbone of custom or predefined functionalities, allowing organizations to create, update, and manage APIs and projects.
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the project.
          format: ulid
          x-go-name: ID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
        environments:
          type: array
          description: |
            List of environments for the project.
          items:
            $ref: '#/components/schemas/ProjectEnvironment'
        name:
          type: string
        currentFiles:
          $ref: '#/components/schemas/Files'
        createdAt:
          type: string
          format: date-time
        dynamicVariablesSchema:
          $ref: '#/components/schemas/DynamicVariablesSchema'
      required:
        - id
        - name
        - environments
        - createdAt
        - currentFiles

    ProjectEnvironment:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the environment.
          format: ulid
          x-go-name: ID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
        name:
          type: string
        status:
          type: string
          description: One of running|suspended|error|draft.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        publicUrl:
          type: string
        files:
          type: array
          description: The files associated with the project.
          items:
            $ref: '#/components/schemas/File'
          x-go-type-skip-optional-pointer: true
        labels:
          $ref: '#/components/schemas/Labels'
      required:
        - id
        - name
        - status
        - createdAt
        - updatedAt
        - publicUrl
        - lastDeployedAt

    File:
      type: object
      properties:
        filename:
          type: string
          description: The name of the file.
        content:
          type: string
          description: The content of the file.
      required:
        - filename
        - content

    Files:
      type: object
      properties:
        files:
          type: array
          description: The files associated with the project.
          items:
            $ref: '#/components/schemas/File'
        labels:
          type: object
          description: |
            The labels associated with the project. Labels are stored as key-value pairs.
            Only string-string values are allowed
          x-go-type: map[string]string
          x-go-type-skip-optional-pointer: true
      required:
        - files
        - labels

    ErrorField:
      description: ErrorField denotes a field which has an error.
      type: object
      properties:
        field:
          type: string
          description: |
            Field is the name of the field which has an error, this may be a path to a nested field, including array
            elements. The format of this field is of the form: "field1.field2[0].field3"
        message:
          type: string
          description: Message is the error message for this specific field.
      required:
        - field
        - message

    Error:
      type: object
      properties:
        code:
          type: string
          description: Code is a machine-readable error code.
        message:
          type: string
          description: Message is a human-readable error message.
        fields:
          type: array
          items:
            $ref: '#/components/schemas/ErrorField'
          x-go-type-skip-optional-pointer: true
        details:
          type: string
          x-go-type-skip-optional-pointer: true
      required:
        - code
        - message

    Log:
      type: object
      properties:
        timestamp:
          type: string
        severity:
          type: string
        message:
          type: string
        error:
          type: string
          x-go-type-skip-optional-pointer: true
        httpRequest:
          type: object
          x-go-type: any
          x-go-type-skip-optional-pointer: true
        fields:
          type: object
          x-go-type: any
          x-go-type-skip-optional-pointer: true
      required:
        - timestamp
        - severity
        - message

    Logs:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/Log'
        nextToken:
          type: string
      required:
        - logs

    PageInfo:
      type: object
      properties:
        totalCount:
          type: integer
        next:
          type: string
          x-go-type-skip-optional-pointer: true
        prev:
          type: string
          x-go-type-skip-optional-pointer: true
      required:
        - totalCount

    TemplateID:
      type: string
      description: |
        This is the ID of the template that the connection is created against.
      format: ulid
      x-go-type: ulid.ULID
      x-go-name: EnvironmentSystemID
      x-go-type-skip-optional-pointer: true
      x-go-type-import:
        path: versori.dev/vergo/ulid

    ConnectionUpdate:
      description: |
        ConnectionUpdate is the request payload to update an existing connection.
      type: object
      properties:
        name:
          type: string
          description: Name is the name of the Connection. This must be unique within the owning Connector.
        credentials:
          $ref: '#/components/schemas/ConnectionCredentials'
        baseUrl:
          description: |
            The baseUrl on the connection allows a dynamic user to override the base URL of the connection. This is useful
            when users have their own instance of a service and want to connect to it.

            For example, a user may have their own instance of shopify and their url is `https://myshopify.com`. They can
            override the base url of the connection to `https://myshopify.com` and all requests will be made to this url.
            If it is left as an empty string, it will be ignored.
          type: string
          format: uri
          x-go-type-skip-optional-pointer: true
          x-go-name: baseURL
      required:
        - name
        - credentials
        - baseUrl

    Connection:
      description: |
        Connection defines the credentials for the owning Connector, and additional variables
        which can be used to customize the Connector in a particular connection.
      type: object
      properties:
        id:
          type: string
          format: ulid
          description: |
            ID is the unique identifier of the Connection. Typically this is only used internally and most (if not all)
            public-facing APIs will use the `name` in combination with the Connector's `id` instead.
          x-go-name: ID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
        name:
          type: string
          description: Name is the name of the Connection. This must be unique within the owning Connector.
        credentials:
          $ref: '#/components/schemas/ConnectionCredentials'
        variables:
          type: array
          items:
            $ref: '#/components/schemas/ConnectionVariable'
        baseUrl:
          description: |
            The baseUrl on the connection allows a dynamic user to override the base URL of the connection. This is useful
            when users have their own instance of a service and want to connect to it.

            For example, a user may have their own instance of shopify and their url is `https://myshopify.com`. They can
            override the base url of the connection to `https://myshopify.com` and all requests will be made to this url.
            If it is left as an empty string, it will be ignored.
          type: string
          format: uri
          x-go-type-skip-optional-pointer: true
          x-go-name: baseURL
        createdAt:
          type: string
          format: date-time
          description: CreatedAt is the time the Connection was created.
        updatedAt:
          type: string
          format: date-time
          description: UpdatedAt is the time the Connection was last updated.
        systemId:
          description: ID of the system to add the project environment.
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: SystemID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        connectionTemplateId:
          $ref: '#/components/schemas/TemplateID'
      required:
        - id
        - name
        - credentials
        - variables
        - createdAt
        - updatedAt

    ConnectionVariable:
      description: ConnectionVariable denotes an arbitrary key/value pair which can be used to configure a connector.
      type: object
      properties:
        name:
          type: string
          description: Name is the name of the connection variable.
        value:
          type: string
          description: Value is the value of the connection variable.
      required:
        - name
        - value

    ConnectionCredentials:
      description: |
        ConnectionCredentials defines the credentials for the owning Connector. If multiple
        credentials are defined for each type, they are applied to the request in the order they are defined. This is to
        enable Connectors which require both a user session token and an API key to be provided in the request.
      type: array
      items:
        $ref: '#/components/schemas/ConnectionCredential'
      x-go-type-skip-optional-pointer: true

    ConnectionPage:
      description: ConnectionPage defines a page of Connection summaries.
      type: object
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Connection'
          required:
            - items

    ConnectionCredential:
      description: >-
        ConnectionCredential contains the a Credential and the AuthSchemeConfig to define how the Credential should be
        used against the Connection's Connector.
      type: object
      properties:
        id:
          type: string
          format: ulid
          x-go-name: ID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
        authSchemeConfig:
          $ref: '#/components/schemas/AuthSchemeConfig'
        credential:
          $ref: '#/components/schemas/Credential'
      required:
        - id

    Credential:
      description: |
        CredentialBase is the base type for all credentials. It contains the common properties which are shared across
        all credential types.
      type: object
      properties:
        id:
          description: ID is the unique identifier of the Credential.
          type: string
          format: ulid
          x-go-name: ID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
        organisationId:
          description: OrganisationID is the unique identifier of the Organisation which owns the Credential.
          type: string
          format: ulid
          x-go-name: OrganisationID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
        type:
          $ref: '#/components/schemas/CredentialType'
        name:
          type: string
          description: Name is the name of the Credential.
        errors:
          description: |
            Errors is a list of errors which occurred when attempting to validate the credential. This field may be
            undefined, which implies that validation has not occurred and the consumer cannot assume whether this
            Credential is valid or not. An empty array indicates that the Credential is valid.
          type: array
          items:
            type: string
          x-go-type-skip-optional-pointer: true
        data:
          $ref: '#/components/schemas/CredentialData'
        expiresAt:
          type: string
          format: date-time
          description: |
            ExpiresAt denotes the time this credential should be automatically deleted. External systems can subscribe
            to deletion events and if the reason is "expired", can trigger the correct notifications to interested
            parties (such as un-publishing jobs which rely on the credential and emailing the owner to rectify it).
      required:
        - id
        - organisationId

    CredentialData:
      type: object
      properties:
        binary:
          $ref: '#/components/schemas/CredentialDataBinary'
        none:
          $ref: '#/components/schemas/CredentialDataNone'
        string:
          $ref: '#/components/schemas/CredentialDataString'
        basicAuth:
          $ref: '#/components/schemas/CredentialDataBasicAuth'
        oauth2Client:
          $ref: '#/components/schemas/CredentialDataOAuth2Client'
        oauth2Token:
          $ref: '#/components/schemas/CredentialDataOAuth2Token'
        oauth2Code:
          $ref: '#/components/schemas/CredentialDataOAuth2Code'
        oauth2Password:
          $ref: '#/components/schemas/CredentialDataOAuth2Password'
        certificate:
          $ref: '#/components/schemas/CredentialDataCertificate'
        oauth1:
          $ref: '#/components/schemas/CredentialDataOAuth1'

    CredentialType:
      description: |
        CredentialType denotes the type of the credential which determines what the Credential's `data` property will
        contain.

        - none: No credential is required to authenticate with the Connector.
        - string: The credential is a string value, such as an API key or password.
        - binary: The credential is a binary value, such as a private key, certificate or other file.
        - basic-auth: The credential is a username and password to be used for basic authentication.
        - oauth2-client: The credential is an OAuth2 client ID and secret to be used for OAuth2 authentication.
        - oauth2-code: The credential is a temporary authorization code which will be exchanged for an oauth2-token.
        - oauth2-password: The credential is an OAuth2 username and password with an optional client ID and secret to be used for OAuth2 authentication.
        - oauth2-token: The credential is an OAuth2 access_token to be used for OAuth2 authentication.
        - oauth1: The credential is an OAuth1 access_token to be used for OAuth1 authentication.
        - certificate: The credential is a PEM encoded certificate, key and CA to be used for TLS client authentication.
      type: string
      enum:
        - none
        - string
        - binary
        - basic-auth
        - oauth2-client
        - oauth1
        - oauth2-code
        - oauth2-password
        - oauth2-token
        - certificate
      x-go-type-skip-optional-pointer: true

    CredentialDataNone:
      title: None
      description: |
        CredentialDataNone contains no data as no credential is required to authenticate with the Connector. It is used
        purely as a placeholder to implement a consistent interface across all CredentialType/AuthSchemeTypes.
      type: object
      additionalProperties: false
    CredentialDataString:
      title: String
      description: |
        CredentialDataString contains a string value and nothing else and is commonly used for API keys. This value
        will be redacted when returned in a response.
      type: object
      properties:
        value:
          type: string
          description: |
            Value is a UTF-8 string containing the credential data. When read from the API this field will be redacted.
      required:
        - value
    CredentialJWTBearer:
      title: JWT
      description: |
        CredentialJWTBearer contains the username and password required to authenticate with the Connector. The
        `secret` property will be redacted when returned in a response.
      type: object
      properties:
        algorithm:
          type: string
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
        secret:
          type: string
          description: |
            Secret is the base64 encoded secret used to sign new JWTs.
        payload:
          description: |
            Payload is stringified JSON object containing the default set of claims to include in the JWT payload.
            Issued JWTs may contain additional claims and may overwrite ones defined here, such as `exp` and `iat`.
          type: string
        expiresIn:
          description: |
            Expires in is a duration in the form `1h2m3s` (see Go's `time.Duration` documentation) which defined
            how long a newly issued JWT should be valid for.
          type: string
          examples:
            - 24h
            - 30m
            - 120s
            - 1m30s
        authorizationHeaderPrefix:
          description: |
            AuthorizationHeaderPrefix is the prefix to use when setting the Authorization header, for example,
            "Bearer" or "JWT".
          type: string
      required:
        - algorithm
        - secret
        - payload
        - expiresIn
        - authorizationHeaderPrefix
    CredentialDataBasicAuth:
      title: Username/Password
      description: |
        CredentialDataBasicAuth contains the username and password required to authenticate with the Connector. The
        `password` property will be redacted when returned in a response.
      type: object
      properties:
        username:
          type: string
          description: Username is the username used to authenticate with the Connector.
        password:
          type: string
          description: |
            Password is the password used to authenticate with the Connector. Will be redacted when returned in a
            response.
      required:
        - username
        - password
    CredentialDataCertificate:
      title: Certificate
      description: |
        CredentialDataCertificate contains the Certificate, Certificate key and CA(Certificate authority).
      type: object
      properties:
        certificate:
          type: string
          description: Certificate is the certificate that will be send to the connection.
        key:
          type: string
          description: Key is the accompanying key for the certificate.
        ca:
          type: string
          description: CA is the Certificate Authority to verify the server certificates against.
      required:
        - certificate
        - key
        - ca
    CredentialDataOAuth2Password:
      title: OAuth 2.0 Password
      description: |
        CredentialDataOAuth2Password contains the username and password of a Resource Owner within an OAuth 2.0
        application. The `password` property will be redacted when returned in a response.
      type: object
      properties:
        username:
          type: string
          description: Username is the username used to authenticate with the Connector.
        password:
          type: string
          description: |
            Password is the password used to authenticate with the Connector. Will be redacted when returned in a
            response.
      required:
        - username
        - password
    CredentialDataOAuth2Client:
      title: OAuth 2.0 Client
      description: |
        CredentialDataOAuth2Client contains the OAuth2 client credentials required to either issue an access token from
        a refresh_token, or via the `client_credentials` and `authorization_code` grant types. The `clientSecret` property will be redacted when
        returned in a response.
      type: object
      properties:
        clientId:
          type: string
          description: |
            ClientID is the OAuth2 client ID used to authenticate with the Connector.
          x-go-name: ClientID
        clientSecret:
          type: string
          description: |
            ClientSecret is the OAuth2 client secret used to authenticate with the Connector. Will be redacted when
            returned in a response.
        tokenUrl:
          type: string
          format: uri
          description: TokenURL is the URL which the application will use to issue an access token.
          x-go-name: TokenURL
        scopes:
          type: array
          items:
            type: string
          description: |
            Scopes is a list of scopes which should be requested when issuing an access token. This is only required if
            this credential is being used on a `client_credentials` grant type, for `authorization_code` grant types the
            requested scopes come from the `CredentialDataOAuth2Token` credential.
          x-go-type-skip-optional-pointer: true
        additionalParams:
          description: |
            AdditionalParams is a URL-encoded query string which can be used to pass additional
            parameters to the OAuth 2.0 token endpoint. These parameters are attached to the body
            in the formatted as the `application/x-www-form-urlencoded` content-type.
          type: string
          x-go-type-skip-optional-pointer: true
        mTLSEnabled:
          type: boolean
          description: |
            MTLSEnabled is a boolean flag which determines whether the client should use mutual TLS authentication when
            communicating with the OAuth2 provider. If enabled, the `mTLSCredentialId` field must be set, or it must be
            created via the `CreateConnection` endpoint with an associated mTLS credential defined beforehand, in which
            case the mTLSCredentialID field will be populated upon saving by the API.
          x-go-type-skip-optional-pointer: true
        mTLSCredentialId:
          type: string
          description: |
            MTLSCredentialID is an optional reference to another credential being created.
            If set the certificate credential will be used when making a request to the tokenUrl.
          x-go-name: MTLSCredentialID
          x-go-type-skip-optional-pointer: true
      required:
        - clientId
        - clientSecret
        - tokenUrl
    CredentialDataOAuth2Token:
      title: OAuth 2.0 Token
      description: |
        CredentialDataOAuth2Token is primarily used to store the refresh_token for an user who has authorized an OAuth2
        Application to access their data. However, this information is not exposed publicly and the only data visible
        via the API are the `scopes` which the user has granted consent for. This can be used to determine whether
        the user should be prompted to re-authorize the application with additional scopes in the event they choose to
        use a new endpoint which requires additional scopes to what they've already consented to.
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
          description: Scopes is a list of scopes which the user has granted consent for.
        accessToken:
          type: string
          description: |
            AccessToken is the OAuth2 access token which can be used to authenticate with the Connector. This
            information is redacted when read from the API.
          x-go-type-skip-optional-pointer: true
        tokenType:
          type: string
          description: |
            TokenType is the type of token which is being issued. Defaults to "Bearer" if not set.
          default: Bearer
          x-go-type-skip-optional-pointer: true
        expiresAt:
          type: string
          format: date-time
          description: |
            ExpiresAt is the time at which the access token will expire. If not defined, the accessToken will be
            reused until a 401 response is received from the Connector, at which point the token should be refreshed
            with the provided `refreshToken`. Ideally this should be provided so that erroneous failures can be
            avoided.
          x-go-type-skip-optional-pointer: true
        refreshToken:
          type: string
          description: |
            RefreshToken is the OAuth2 refresh token which can be used to issue new access tokens. This information is
            redacted when read from the API.

            This is a required field as it is used to refresh the access token when it expires. If users are providing
            an access token which does not expire using this credential type, then the same functionality may be
            achieved by using a simple API key and OAuth 2.0 need not be used.
      required:
        - scopes
        - refreshToken
    CredentialDataOAuth2Code:
      title: OAuth 2.0 Code
      description: |
        CredentialDataOAuth2Code is used to exchange an authorization code for an access token and
        is denoted by the `oauth2-code` type.
        This is only used when creating or updating an OAuth 2.0 connection using the
        `authorization_code` grant type. Retrieving this credential will return a payload of
        type `oauth2-token` in the shape of a `CredentialDataOAuth2Token` object.
      type: object
      properties:
        code:
          description: |
            Code is the authorization code which will be exchanged for an access token.
          type: string
        state:
          description: |
            State is the state value which is propagated through the OAuth2 flow.
          type: string
      required:
        - code
        - state
    CredentialDataOAuth1:
      title: OAuth1
      type: object
      properties:
        state:
          type: string
        oauthToken:
          type: string
        oauthVerifier:
          type: string
      required:
        - oauthVerifier
        - oauthToken
        - state

    CredentialDataBinary:
      title: Binary
      description: |
        CredentialDataBinary is commonly used to store non-string data such as binary files or encryption keys. This
        value will be redacted when returned in a response.
      type: object
      properties:
        valueBase64:
          type: string
          description: |
            Value is a base64 encoded string containing the credential data. This could decode to a valid utf-8 string,
            or it could decode to a binary file such as a private key etc. When read from the API this field will be
            redacted.
      required:
        - valueBase64

    AuthSchemeConfig:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AuthSchemeType'
        none:
          $ref: '#/components/schemas/AuthSchemeConfigNone'
        apiKey:
          $ref: '#/components/schemas/AuthSchemeConfigAPIKey'
        basicAuth:
          $ref: '#/components/schemas/AuthSchemeConfigBasicAuth'
        oauth2:
          $ref: '#/components/schemas/AuthSchemeConfigOAuth2'
        oauth1:
          $ref: '#/components/schemas/AuthSchemeConfigOAuth1'
        hmac:
          $ref: '#/components/schemas/AuthSchemeConfigHMAC'
        certificate:
          $ref: '#/components/schemas/AuthSchemeConfigCertificate'
      required:
        - id
        - type

    AuthSchemeConfigAPIKey:
      title: API Key
      description: |
        AuthSchemeConfigAPIKey defines how a Connector uses an API key credential to authenticate with the system.
      type: object
      allOf:
        - $ref: '#/components/schemas/AuthSchemeConfigBase'
        - type: object
          properties:
            name:
              type: string
              description: Name is the query parameter/header/cookie name which will be used to send the API key.
            in:
              $ref: '#/components/schemas/AuthSchemeConfigAPIKeyIn'
          required:
            - name
            - in

    AuthSchemeConfigAPIKeyIn:
      description: |
        AuthSchemeConfigAPIKeyIn defines the location of the API key in the request.
      type: string
      enum:
        - query
        - header
        - cookie

    AuthSchemeType:
      description: |
        Type is a unique identifier of the AuthScheme, this is a kebab-case formatted string, see
        enum values for possible options.
      type: string
      enum:
        - none
        - api-key
        - basic-auth
        - oauth2
        - hmac
        - jwt-bearer
        - certificate
        - oauth1
    OAuth2Scope:
      description: |
        OAuth2Scope represents a single scope which can be requested by an OAuth2 application.
      type: object
      properties:
        name:
          type: string
          description: |
            Name is the name of the scope as determined by the application to which this Connector
            is connecting to.
        description:
          type: string
          description: |
            Description describes the scope in human-friendly terminology. This text may be
            displayed to users via a help tooltip or similar.
          x-go-type-skip-optional-pointer: true
      required:
        - name
    AuthSchemeConfigBase:
      type: object
      properties:
        id:
          type: string
          format: ulid
          description: |
            ID is the unique identifier of the AuthSchemeConfig, this is generated by the client and
            only requires to be unique amongst the elements of the array in which is it contained.
          x-go-name: ID
        description:
          description: |
            Description enables users to distinguish multiple configurations which use the same
            schemeType.
          type: string
        validationMessages:
          description: |
            ValidationMessages is a list of messages which are generated when the AuthSchemeConfig
            is validated. This is typically used to provide feedback to the user when they are
            creating or updating the AuthSchemeConfig.

            This field will be ignored if sent to the API.
          type: array
          items:
            $ref: '#/components/schemas/Message'
          x-go-type-skip-optional-pointer: true
      required:
        - id
        - description
    AuthSchemeConfigOAuth2GrantType:
      type: string
      enum:
        - authorizationCode
        - clientCredentials
        - password
    AuthSchemeConfigOAuth2GrantAuthorizationCode:
      title: authorization_code
      description: |
        AuthSchemeConfigOAuth2GrantAuthorizationCode contains grant-specific configuration for the
        `authorization_code` grant type.

        How the API manages changes to this configuration is as follows:

        - CredentialID and OrganisationID are not set, a new credential is created containing the
          sensitive information and the non-sensitive information is updated in the database.
        - Otherwise, both the credential and the database are updated using JSON Merge Patch, with
          undefined properties not being updated.
        - Any other permutation will result in a 400 Bad Request.
      type: object
      properties:
        credentialId:
          description: |
            CredentialID is the unique identifier of the Credential which contains the client ID and
            client secret to be used as part of the `password` flow.
          type: string
          format: ulid
          x-go-name: CredentialID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        organisationId:
          description: |
            OrganisationID is the unique identifier of the Organisation that owns the Credential.
            This can be different to the Connector's OrganisationID since some may be imported from
            Versori's public library.
          type: string
          format: ulid
          x-go-name: OrganisationID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        clientId:
          description: |
            ClientID is the OAuth 2.0 client's identifier. This is not a sensitive value and may be
            presented to the user in plaintext.
          type: string
          x-go-name: ClientID
        clientSecret:
          description: |
            ClientSecret is the OAuth 2.0 client's secret. This is a sensitive value and will not be
            displayed to the user.
          type: string
      required:
        - grantType
    AuthSchemeConfigOAuth2GrantClientCredentials:
      title: client_credentials
      type: object
    AuthSchemeConfigOAuth2GrantPassword:
      title: password
      description: |
        AuthSchemeConfigOAuth2GrantPassword contains grant-specific configuration for the `password`
        grant type.

        How the API manages changes to this configuration is as follows:

        - CredentialID and OrganisationID are not set, a new credential is created containing the
          sensitive information and the non-sensitive information is created/updated in the
          database.
        - Otherwise, both the credential and the database are updated using JSON Merge Patch.
        - Any other permutation will result in a 400 Bad Request.
      type: object
      properties:
        credentialId:
          description: |
            CredentialID is the unique identifier of the Credential which contains the client ID and
            client secret to be used as part of the `password` flow.
          type: string
          format: ulid
          x-go-name: CredentialID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        organisationId:
          description: |
            OrganisationID is the unique identifier of the Organisation that owns the Credential. This can be different
            to the Connector's OrganisationID since some may be imported from Versori's public library.
          type: string
          format: ulid
          x-go-name: OrganisationID
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        clientId:
          description: |
            ClientID is the OAuth 2.0 client's identifier. This is not a sensitive value and may be presented to the
            user in plaintext.
          type: string
          x-go-name: ClientID
        clientSecret:
          description: |
            ClientSecret is the OAuth 2.0 client's secret. This is a sensitive value and will not be displayed to the
            user. It may be populated when updating the Credential.
          type: string
      required:
        - grantType
    AuthSchemeConfigOAuth2Grant:
      type: object
      properties:
        authorizationCode:
          $ref: '#/components/schemas/AuthSchemeConfigOAuth2GrantAuthorizationCode'
        clientCredentials:
          $ref: '#/components/schemas/AuthSchemeConfigOAuth2GrantClientCredentials'
        password:
          $ref: '#/components/schemas/AuthSchemeConfigOAuth2GrantPassword'
        type:
          $ref: '#/components/schemas/AuthSchemeConfigOAuth2GrantType'
      required:
        - type

    AuthSchemeConfigNone:
      title: None
      description: |
        AuthSchemeConfigNone is a placeholder object with the schemeType set to `none`. There is no other configuration
        required.
      type: object
      allOf:
        - $ref: '#/components/schemas/AuthSchemeConfigBase'

    AuthSchemeConfigBasicAuth:
      title: Basic Auth
      description: |
        AuthSchemeConfigBasicAuth is a placeholder object with the schemeType set to `basic-auth`. There is no other
        configuration required.
      type: object
      allOf:
        - $ref: '#/components/schemas/AuthSchemeConfigBase'

    AuthSchemeConfigCertificate:
      title: TLS Certificate
      description: |
        AuthSchemeConfigCertificate is a placeholder object with the schemeType set to `certificate`.
        There is no other config required
      type: object
      allOf:
        - $ref: '#/components/schemas/AuthSchemeConfigBase'

    AuthSchemeConfigOAuth2:
      title: OAuth 2.0
      description: |
        AuthSchemeConfigOAuth2 defines how a Connector uses an OAuth2 credential to authenticate
        with the system. This is to be used for all OAuth 2.0 flows which require a client ID and
        client secret as part of the Connector's configuration. Connectors which use the
        `client_credentials` grant type, where the user provides the Client ID  and Client Secret at
        the point where they connect, should use the `AuthSchemeConfigOAuth2ClientCredentials` type
        instead.
      type: object
      allOf:
        - $ref: '#/components/schemas/AuthSchemeConfigBase'
        - type: object
          properties:
            authorizeUrl:
              type: string
              format: uri
              description: |
                AuthorizeURL is the URL which the user will be redirected to in order to authorize
                the application.
              x-go-name: AuthorizeURL
              x-go-type-skip-optional-pointer: true
            tokenUrl:
              type: string
              format: uri
              description: |
                TokenURL is the URL which the application will use to issue an access token.
              x-go-name: TokenURL
            scopes:
              description: |
                Scopes is the list of all OAuth2 scopes which the application supports. The user
                will be allowed to choose which scopes to request when configuring the Connection.
              type: array
              items:
                $ref: '#/components/schemas/OAuth2Scope'
            defaultScopes:
              description: |
                DefaultScopes is the list of scopes which will be requested by default when the user
                connects the Connector. This is useful for Connectors which require a specific set
                of scopes to function correctly.
              type: array
              items:
                type: string
            additionalAuthorizeParams:
              description: |
                AdditionalAuthorizeParams is a URL-encoded query string which should be attached to
                the AuthorizeURL when the user is redirected to the OAuth 2.0 authorization
                endpoint.

                This value is only used by the UI to drive the default values when connecting, the
                API to `InitialiseOAuth2Connection` can be provided a different value if required.
              type: string
              x-go-type-skip-optional-pointer: true
            additionalTokenParams:
              description: |
                AdditionalTokenParams is a URL-encoded string following the
                `application/x-www-form-urlencoded` mime-type, which can be used to pass additional
                parameters to the OAuth 2.0 token endpoint within the request body.
              type: string
              x-go-type-skip-optional-pointer: true
            mtlsEnabled:
              type: boolean
              description: |
                MTLSEnabled is a flag which determines whether the Connector should use Mutual TLS
                (mTLS) to authenticate with the OAuth 2.0 token endpoint. This is useful for
                Connectors which require a higher level of security.
              x-go-name: MTLSEnabled
              x-go-type-skip-optional-pointer: true
            mtlsCredentialId:
              type: string
              description: |
                MTLSCredentialID is the unique identifier of the Credential which contains the
                client certificate and private key to be used as part of the mTLS connection.

                This may be unset when creating a connection, in which case if `mtlsEnabled` is
                true, then the API will find an associated AuthSchemeConfigCertificate and link
                them automatically.
              x-go-name: MTLSCredentialID
            grant:
              $ref: '#/components/schemas/AuthSchemeConfigOAuth2Grant'
          required:
            - tokenUrl
            - scopes
            - defaultScopes
            - grant

    AuthSchemeConfigOAuth1:
      title: OAuth 2.0
      type: object
      allOf:
        - $ref: '#/components/schemas/AuthSchemeConfigBase'
        - type: object
          properties:
            consumerKey:
              type: string
            consumerSecret:
              type: string
            tempCredentialEndpoint:
              $ref: '#/components/schemas/Endpoint'
            resourceOwnerAuthorizationEndpoint:
              $ref: '#/components/schemas/Endpoint'
            tokenEndpoint:
              $ref: '#/components/schemas/Endpoint'
            signatureMethod:
              type: string
            credentialId:
              type: string
              format: ulid
              x-go-type: ulid.ULID
              x-go-name: CredentialID
              x-go-type-import:
                path: versori.dev/vergo/ulid
              x-go-type-skip-optional-pointer: true
          required:
            - consumerKey
            - consumerSecret
            - tempCredentialEndpoint
            - resourceOwnerAuthorizationEndpoint
            - tokenEndpoint
            - signatureMethod

    Endpoint:
      type: object
      properties:
        url:
          type: string
          description: URL of the endpoint, may contain templated values in curly braces
        additionalParamConfigs:
          type: array
          items:
            $ref: '#/components/schemas/ParameterConfig'
          x-go-type-skip-optional-pointer: true
        parameterTransmission:
          type: string
          enum:
            - AUTH_STYLE_AUTHORIZATION_HEADER
            - AUTH_STYLE_FORM
            - AUTH_STYLE_QUERY
      required:
        - url

    ParameterConfig:
      type: object
      properties:
        parameterName:
          type: string
          description: Key of the additional parameter to insert
        targetName:
          type: string
          description: Override name for the parameter in endpoint requests
          x-go-type-skip-optional-pointer: true
        location:
          type: string
          enum:
            - LOCATION_IGNORE
            - LOCATION_BODY
            - LOCATION_HEADER
            - LOCATION_QUERY
            - LOCATION_ENDPOINT
            - LOCATION_HEADER_PARAMETER
        usages:
          type: string
          enum:
            - USAGE_UNKNOWN
            - USAGE_TEMP_CREDENTIAL_ENDPOINT
            - USAGE_TOKEN_REQUEST_ENDPOINT
        required:
          type: boolean
          description: Whether parameter is required in requests
        modifiable:
          type: boolean
          description: Whether parameter can be modified by user
      required:
        - location
        - usage
        - required
        - modifiable
        - parameterName

    AuthSchemeConfigHMACIn:
      description: AuthSchemeConfigHMACIn defines where the signature should be set on requests.
      type: string
      enum:
        - query
        - header
        - cookie
    AuthSchemeConfigHMAC:
      title: HMAC
      description: |
        AuthSchemeConfigHMAC defines how a Connector uses an HMAC credential to authenticate with the system.

        This may be used on outbound requests to sign the request body, however it is more commonly used on inbound
        requests (i.e. from Webhook Triggers) to verify the sender of the request is allowed to invoke the Trigger.
      type: object
      allOf:
        - $ref: '#/components/schemas/AuthSchemeConfigBase'
        - type: object
          properties:
            name:
              type: string
              description: Name is the query parameter/header/cookie name which will be used to send the signature.
            in:
              $ref: '#/components/schemas/AuthSchemeConfigHMACIn'
            algorithm:
              description: AuthSchemeConfigHMACAlgorithm defines the hashing algorithm to use when generating the HMAC signature.
              type: string
              enum:
                - sha1
                - sha256
                - sha512
            digestInputs:
              description: |
                AuthSchemeConfigHMACInputs defines what parts of a HTTP request are consumed to generate the HMAC signature. Some systems
                only generate the signature from the request body, others may include the URL. The order of this array
                defines the order in which the input is fed into the hashing function.
              type: array
              items:
                type: string
                enum:
                  - body
                  - url
          required:
            - name
            - in
            - algorithm
            - digestInputs

    Message:
      description: |
        Message is a message to be displayed to the user to indicate some information about the
        preceding request.
      type: object
      properties:
        text:
          description: Text contains the text of the message.
          type: string
        severity:
          $ref: '#/components/schemas/MessageSeverity'
        detail:
          description: |
            Details contains additional information about the message. This is intended to be used
            to provide more information about the message, such as a list of validation errors.
          type: array
          items:
            type: string
          x-go-type-skip-optional-pointer: true
      required:
        - text
        - severity
    MessageSeverity:
      type: string
      enum:
        - info
        - warning
        - error

    InitialiseOAuth2ConnectionRequest:
      description: |
        InitialiseOAuth2ConnectionRequest is the payload to initialise an OAuth 2.0 connection.
      type: object
      properties:
        credential:
          type: object
          properties:
            id:
              description: |
                ID is the unique identifier of the credential which is being used to
                initialise the connection. This is used to load the client_secret when the authorisation
                code is exchanged for an access token.
              type: string
              format: ulid
              x-go-name: ID
              x-go-type: ulid.ULID
              x-go-type-import:
                path: versori.dev/vergo/ulid
            organisationId:
              description: |
                OrganisationID is the unique identifier of the organisation which the credential is
                associated with. This is used to ensure that the credential is only used to initialise
                connections for the organisation which owns the credential.
              type: string
              format: ulid
              x-go-name: OrganisationID
              x-go-type: ulid.ULID
              x-go-type-import:
                path: versori.dev/vergo/ulid
          required:
            - id
            - organisationId
        authorizeUrl:
          description: |
            AuthorizeURL is the URL which the user will be redirected to in order to authorize
            the application.
          type: string
          format: uri
          x-go-name: AuthorizeURL
        clientId:
          description: |
            ClientID is the OAuth 2.0 client ID which is used to identify the application to the
            OAuth 2.0 provider.
          type: string
          x-go-name: ClientID
        scopes:
          description: |
            Scopes is a list of OAuth 2.0 scopes which the application is requesting access to.

            Unless `disableOfflineAccess` is set to true, the API will also include the standard
            `offline_access` scope in addition to the ones provided here.
          type: array
          items:
            type: string
          x-go-type-skip-optional-pointer: true
        disableOfflineAccess:
          description: |
            DisableOfflineAccess is a flag which can be set to true to disable the inclusion of the
            standard `offline_access` scope in the list of scopes. This is defined separately to
            `scopes` to make it clear that the API will always include the `offline_access` scope
            by default, but can be disabled if the system does not implement the standards so that
            the user can define their own custom scope as part of `scopes`.
          type: boolean
          x-go-type-skip-optional-pointer: true
        prompt:
          description: |
            Prompt controls the behaviour of the OAuth 2.0 provider when the user is redirected to
            the authorize URL. This is typically used to force the user to re-authenticate or to
            select a user account.

            If set, should be one of "none", "login", "consent", "select_account". However the
            specification dictates that arbitrary prompts may be provided in case of new values
            added in the future. Some providers also allow multiple values to be provided, separated
            by the '+' symbol, i.e. `consent+select_account`.

            If not provided, this API defaults to "login", unless `additionalParams` contains the
            `approval_prompt` parameter (thanks, Google refresh tokens), in which case this value
            does not default to anything.
          type: string
        additionalParams:
          description: |
            AdditionalParams is a URL-encoded query string which can be used to pass additional
            parameters to the OAuth 2.0 authorize endpoint. These cannot conflict with any of the
            other parameters defined by the request, an attempt to do so will result in an error.

            These parameters are attached to returned URL as query parameters.
          type: string
          examples:
            two query parameters: bar=baz&foo=cat%20bob
          x-go-type-skip-optional-pointer: true
      required:
        - credential
        - authorizeUrl
        - clientId

    InitialiseOAuth2ConnectionResponse:
      description: |
        InitialiseOAuth2ConnectionResponse contains the URL to redirect the user to in order to
        initiate an OAuth 2.0 `authorization_code` grant flow.
      type: object
      properties:
        url:
          description: The URL to redirect the user to.
          type: string
          x-go-name: URL
      required:
        - url

    InitialiseOAuth1ConnectionRequest:
      description: |
        InitialiseOAuth1ConnectionRequest is the payload to initialise an OAuth 1.0 connection.
      type: object
      properties:
        credential:
          type: object
          properties:
            id:
              type: string
              format: ulid
              x-go-name: ID
              x-go-type: ulid.ULID
              x-go-type-import:
                path: versori.dev/vergo/ulid
            organisationId:
              type: string
              format: ulid
              x-go-name: OrganisationID
              x-go-type: ulid.ULID
              x-go-type-import:
                path: versori.dev/vergo/ulid
          required:
            - id
            - organisationId
      required:
        - credential

    InitialiseOAuth1ConnectionResponse:
      type: object
      properties:
        url:
          description: The URL to redirect the user to.
          type: string
          x-go-name: URL
      required:
        - url

    ConnectionCredentialsCreate:
      type: array
      items:
        $ref: '#/components/schemas/ConnectionCredential'
      x-go-type-skip-optional-pointer: true

    EndUser:
      type: object
      properties:
        id:
          description: |
            ID is the Versori identifier for the user. Most APIs will not use this field but instead reference
            users by their externalId.
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-type-skip-optional-pointer: true
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-name: ID
        externalId:
          description: |
            ExternalID is the identifier for the user as determined by the organisation. This typically should
            be the same as the user's ID on the organisations system. Regardless of the value, it must
            be unique within the Organisation.
          type: string
          x-go-name: ExternalID
        displayName:
          description: |
            DisplayName is an optional human-readable name for the user. If not set, the default is an empty string.
          type: string
        organisationId:
          description: The organisation ID to which the user belongs to.
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-type-skip-optional-pointer: true
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-name: OrganisationID
        createdAt:
          type: string
          format: date-time
          description: CreatedAt is the time the user was created.
          x-go-type: time.Time
        updatedAt:
          type: string
          format: date-time
          description: UpdatedAt is the time the user was last updated.
          x-go-type: time.Time
      required:
        - id
        - externalId
        - displayName
        - organisationId
        - createdAt
        - updatedAt

    EndUserCreate:
      description: Request to create a new End User
      type: object
      properties:
        externalId:
          description: ExternalID is the identifier of the user
          type: string
          x-go-type-name: ExternalID
        displayName:
          description: DisplayName is a human-readable name for the user
          type: string
          x-go-type-skip-optional-pointer: true
      required:
        - externalId

    EndUserPage:
      type: object
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/EndUser'
          required:
            - users

    Automation:
      type: object
      properties:
        id:
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-type-import:
            path: versori.dev/vergo/ulid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - name

    AutomationRun:
      type: object
      properties:
        prompt:
          type: string
      required:
        - prompt

    AutomationRunResponse:
      type: object
      properties:
        executionId:
          type: string
      required:
        - executionId

    AutomationCreate:
      type: object
      properties:
        name:
          type: string

    UpdateSystem:
      type: object
      properties:
        name:
          type: string
        domain:
          type: string
        templateBaseUrl:
          type: string

    SystemCreate:
      type: object
      properties:
        name:
          type: string
        domain:
          type: string
        templateBaseUrl:
          type: string
        authSchemeConfigs:
          type: array
          items:
            $ref: '#/components/schemas/AuthSchemeConfig'
        labels:
          $ref: '#/components/schemas/Labels'
      required:
        - name
        - authSchemeConfigs
        - domain
        - templateBaseUrl

    LinkSystem:
      type: object
      properties:
        systemId:
          description: ID of the system to add the project environment.
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: SystemID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        name:
          type: string
          description: How you will reference your system from the SDK.
        environmentId:
          description: The environment to link the system to.
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: EnvironmentID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        dynamic:
          type: boolean
          description: |
            If the connections to the system need to be dynamic or static.
            Dynamic connections are used when the integration runs for multiple end users.
            Defaults to false if not set.
          x-go-type-skip-optional-pointer: true
      required:
        - name
        - systemId
        - environment

    System:
      type: object
      properties:
        id:
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: ID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        name:
          type: string
        domain:
          type: string
        authSchemeConfigs:
          type: array
          items:
            $ref: '#/components/schemas/AuthSchemeConfig'
        templateBaseUrl:
          type: string
      required:
        - name
        - domain
        - templateBaseUrl
        - authSchemeConfigs
        - id

    UpdateConnectionTemplate:
      type: object
      properties:
        name:
          type: string
          description: The name of the template. This is how the connections should be referenced in code.
        dynamic:
          type: boolean

    ConnectionTemplate:
      type: object
      properties:
        id:
          type: string
          description: The system ID.
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: ID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        connectionTemplateId:
          type: string
          format: ulid
          x-go-type: ulid.ULID
          x-go-name: EnvironmentSystemID
          x-go-type-import:
            path: versori.dev/vergo/ulid
          x-go-type-skip-optional-pointer: true
        name:
          type: string
          description: The name of the template. This is how the connections should be referenced in code.
        domain:
          type: string
        dynamic:
          type: boolean
        authSchemeConfigs:
          type: array
          items:
            $ref: '#/components/schemas/AuthSchemeConfig'
        templateBaseUrl:
          type: string
      required:
        - id
        - templateId
        - name
        - domain
        - dynamic
        - templateBaseUrl
        - authSchemeConfigs

    EnvironmentSystemPage:
      description: TriggerPage defines a paginated list of Triggers.
      type: object
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ConnectionTemplate'
            next:
              type: string
            prev:
              type: string
          required:
            - items

    SystemPage:
      description: TriggerPage defines a paginated list of Triggers.
      type: object
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/System'
          required:
            - items

    Labels:
      type: object
      description: |
        Labels is a map of key-value pairs that can be used to store arbitrary metadata about a resource.
        Keys must start with a letter and can only contain letters, numbers, and underscores.
        Values can be any string.
      x-go-type: map[string]string
      x-go-type-skip-optional-pointer: true

    DynamicVariables:
      type: object
      x-go-type-skip-optional-pointer: true
      x-go-type: map[string]any

  parameters:
    user_id:
      name: user_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
        x-go-type: ulid.ULID
        x-go-name: ID
        x-go-type-import:
          path: versori.dev/vergo/ulid

    organisation_id:
      name: organisation_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
        x-go-type: ulid.ULID
        x-go-name: OrganisationID
        x-go-type-import:
          path: versori.dev/vergo/ulid

    connection_id:
      name: connection_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
        x-go-type: ulid.ULID
        x-go-name: ConnectionID
        x-go-type-import:
          path: versori.dev/vergo/ulid

    automation_id:
      name: automation_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
        x-go-type: ulid.ULID
        x-go-name: AutomationID
        x-go-type-import:
          path: versori.dev/vergo/ulid

    environment_id:
      name: environment_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
        x-go-type: ulid.ULID
        x-go-name: EnvironmentID
        x-go-type-import:
          path: versori.dev/vergo/ulid

    activation_id:
      name: activation_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
        x-go-type: ulid.ULID
        x-go-name: ActivationID
        x-go-type-import:
          path: versori.dev/vergo/ulid

    env_system_id:
      name: env_system_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
        x-go-type: ulid.ULID
        x-go-name: EnvSystemID
        x-go-type-import:
          path: versori.dev/vergo/ulid

    project_id:
      name: project_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
        x-go-type: ulid.ULID
        x-go-name: ProjectID
        x-go-type-import:
          path: versori.dev/vergo/ulid

    system_id:
      name: system_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
        x-go-type: ulid.ULID
        x-go-name: SystemID
        x-go-type-import:
          path: versori.dev/vergo/ulid

    env_id:
      name: env_id
      in: query
      required: false
      schema:
        type: string

    project_env:
      name: project_env
      in: query
      required: false
      schema:
        type: string

    first:
      name: first
      in: query
      required: false
      schema:
        type: integer
        default: 20

    before:
      name: before
      in: query
      required: false
      schema:
        type: string

    after:
      name: after
      in: query
      required: false
      schema:
        type: string

    search:
      name: search
      in: query
      required: false
      schema:
        type: string

  securitySchemes:
    cookie:
      description: Cookie authentication used by the Versori Platform.
      type: apiKey
      in: cookie
      name: cookie
    bearerToken:
      description: |
        Bearer token authentication used by the Versori Platform. External consumers must provide an API key, however
        internal consumers must provide a JWT id_token issued by our IdP.
      type: http
      scheme: bearer
