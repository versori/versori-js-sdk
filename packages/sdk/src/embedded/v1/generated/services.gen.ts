// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type {
    ListHubsData,
    ListHubsError,
    ListHubsResponse,
    CreateHubData,
    CreateHubError,
    CreateHubResponse,
    GetHubData,
    GetHubError,
    GetHubResponse,
    CreateEndUserData,
    CreateEndUserError,
    CreateEndUserResponse,
    ListEndUsersData,
    ListEndUsersError,
    ListEndUsersResponse,
    GetEndUserData,
    GetEndUserError,
    GetEndUserResponse,
    CreateEndUserConnectionData,
    CreateEndUserConnectionError,
    CreateEndUserConnectionResponse,
    ListEndUserConnectionsData,
    ListEndUserConnectionsError,
    ListEndUserConnectionsResponse,
    CreateIntegrationData,
    CreateIntegrationError,
    CreateIntegrationResponse,
    ListIntegrationsData,
    ListIntegrationsError,
    ListIntegrationsResponse,
    DeleteIntegrationData,
    DeleteIntegrationError,
    DeleteIntegrationResponse,
    CreateHubConnectionTemplateData,
    CreateHubConnectionTemplateError,
    CreateHubConnectionTemplateResponse,
    ListIntegrationConnectionTemplatesData,
    ListIntegrationConnectionTemplatesError,
    ListIntegrationConnectionTemplatesResponse,
    UpdateIntegrationMetadataData,
    UpdateIntegrationMetadataError,
    UpdateIntegrationMetadataResponse,
    GetEndUserConnectionData,
    GetEndUserConnectionError,
    GetEndUserConnectionResponse,
    ListEndUserIntegrationsData,
    ListEndUserIntegrationsError,
    ListEndUserIntegrationsResponse,
    GetEmbeddedIntegrationData,
    GetEmbeddedIntegrationError,
    GetEmbeddedIntegrationResponse,
    InitialiseOauth2EmbeddedConnectionData,
    InitialiseOauth2EmbeddedConnectionError,
    InitialiseOauth2EmbeddedConnectionResponse,
    ListEndUserActivationsData,
    ListEndUserActivationsError,
    ListEndUserActivationsResponse,
    ActivateIntegrationData,
    ActivateIntegrationError,
    ActivateIntegrationResponse,
    GetActivationData,
    GetActivationError,
    GetActivationResponse,
    DeleteActivationData,
    DeleteActivationError,
    DeleteActivationResponse,
    HealthCheckError,
    HealthCheckResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * List Hubs
 * ListHubs returns all the hubs for the given organisation, but is returned as a paginated list.
 *
 */
export const listHubs = <ThrowOnError extends boolean = false>(options: Options<ListHubsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListHubsResponse, ListHubsError, ThrowOnError>({
        ...options,
        url: '/o/{organisation_id}/hubs',
    });
};

/**
 * Create a new Hub
 * Create a new Hub
 */
export const createHub = <ThrowOnError extends boolean = false>(options?: Options<CreateHubData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateHubResponse, CreateHubError, ThrowOnError>({
        ...options,
        url: '/hubs',
    });
};

/**
 * Retrieve a Hub
 * GetHub returns the Hub for the given ID.
 *
 */
export const getHub = <ThrowOnError extends boolean = false>(options: Options<GetHubData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHubResponse, GetHubError, ThrowOnError>({
        ...options,
        url: '/hubs/{hub_id}',
    });
};

/**
 * Create an End User
 * CreateEndUser creates a new End User for the given Hub.
 *
 * The end user requires a unique `externalId` which is recommended to be the same as the user's ID on the
 * Primary Connector for the Hub. This is an immutable field so should not be set to something that may change
 * such as an email address.
 *
 * Before an end user can activate an Integration, they must also have a Connection defined for the Primary
 * Connector. This may be created as part of this request, a separate request to CreateConnection, or as part of
 * the request in the first Activate call.
 *
 */
export const createEndUser = <ThrowOnError extends boolean = false>(
    options: Options<CreateEndUserData, ThrowOnError>
) => {
    return (options?.client ?? client).post<CreateEndUserResponse, CreateEndUserError, ThrowOnError>({
        ...options,
        url: '/hubs/{hub_id}/users',
    });
};

/**
 * List End Users
 * ListEndUsers returns a paginated list of all the End Users for the given Hub.
 *
 */
export const listEndUsers = <ThrowOnError extends boolean = false>(
    options: Options<ListEndUsersData, ThrowOnError>
) => {
    return (options?.client ?? client).get<ListEndUsersResponse, ListEndUsersError, ThrowOnError>({
        ...options,
        url: '/hubs/{hub_id}/users',
    });
};

/**
 * Retrieve an End User
 * GetEndUser returns the End User for the given ID.
 *
 */
export const getEndUser = <ThrowOnError extends boolean = false>(options: Options<GetEndUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEndUserResponse, GetEndUserError, ThrowOnError>({
        ...options,
        url: '/hubs/{hub_id}/users/{user_id}',
    });
};

/**
 * Create End User Connection
 * CreateEndUserConnection creates a new Connection for the given User. The Connection is used to authenticate the
 * user to a Hub Connector.
 *
 * This endpoint is typically only used for more bespoke implementations where an End User needs to authenticate
 * to a Connector outside of the normal activation flow, for example where credentials are provided by another API
 * and not through End User actions in the embedded UI.
 *
 */
export const createEndUserConnection = <ThrowOnError extends boolean = false>(
    options: Options<CreateEndUserConnectionData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        CreateEndUserConnectionResponse,
        CreateEndUserConnectionError,
        ThrowOnError
    >({
        ...options,
        url: '/hubs/{hub_id}/users/{user_id}/connections',
    });
};

/**
 * List End User Connections
 * ListEndUserConnections returns all the Connections for the given End User.
 *
 * The result may be filtered by `hub_connector_id` to only return connections for a specific Hub Connector.
 *
 */
export const listEndUserConnections = <ThrowOnError extends boolean = false>(
    options: Options<ListEndUserConnectionsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<ListEndUserConnectionsResponse, ListEndUserConnectionsError, ThrowOnError>({
        ...options,
        url: '/hubs/{hub_id}/users/{user_id}/connections',
    });
};

/**
 * Create Integration
 * Create Integration
 */
export const createIntegration = <ThrowOnError extends boolean = false>(
    options: Options<CreateIntegrationData, ThrowOnError>
) => {
    return (options?.client ?? client).post<CreateIntegrationResponse, CreateIntegrationError, ThrowOnError>({
        ...options,
        url: '/hubs/{hub_id}/integrations',
    });
};

/**
 * List Integrations
 * ListIntegrations returns all the integrations for the given Hub.
 *
 * This API should not be exposed to End Users via the embedded UI since it includes integrations which have not
 * been published.
 *
 */
export const listIntegrations = <ThrowOnError extends boolean = false>(
    options: Options<ListIntegrationsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<ListIntegrationsResponse, ListIntegrationsError, ThrowOnError>({
        ...options,
        url: '/hubs/{hub_id}/integrations',
    });
};

/**
 * Delete an integration.
 * DeleteIntegration deletes the integration.
 *
 * If the integration is deployed it will return an error.
 *
 */
export const deleteIntegration = <ThrowOnError extends boolean = false>(
    options: Options<DeleteIntegrationData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<DeleteIntegrationResponse, DeleteIntegrationError, ThrowOnError>({
        ...options,
        url: '/integrations/{integration_id}',
    });
};

/**
 * Create a Hub Connector
 * CreateHubConnectionTemplate creates a new Hub Connector for the given Integration.
 *
 * A Hub Connector is a lightweight wrapper around a Connector from Connect API, but includes additional
 * information to make embedding the integration simpler:
 *
 * - A name/reference for the Hub Connector, which represents the purpose of the Connector in the context of the
 * Hub's Integration. For example, where an Integration is synchronising data between two accounts of the same
 * system, each Hub Connector may be referenced, "Source" and "Target", even though they are both referencing the
 * same underlying Connector.
 * - Which `AuthSchemeConfig` to use, so that when the end user activates the integration, they
 * are prompted to authenticate in the correct way.
 *
 */
export const createHubConnectionTemplate = <ThrowOnError extends boolean = false>(
    options: Options<CreateHubConnectionTemplateData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        CreateHubConnectionTemplateResponse,
        CreateHubConnectionTemplateError,
        ThrowOnError
    >({
        ...options,
        url: '/integrations/{integration_id}/connection-templates',
    });
};

/**
 * List Hub Connectors
 * ListIntegrationConnectors returns all the Hub Connectors for the given Integration.
 *
 * This API should not be exposed to End Users via the embedded UI since it includes connectors which have not
 * been published.
 *
 */
export const listIntegrationConnectionTemplates = <ThrowOnError extends boolean = false>(
    options: Options<ListIntegrationConnectionTemplatesData, ThrowOnError>
) => {
    return (options?.client ?? client).get<
        ListIntegrationConnectionTemplatesResponse,
        ListIntegrationConnectionTemplatesError,
        ThrowOnError
    >({
        ...options,
        url: '/integrations/{integration_id}/connection-templates',
    });
};

/**
 * Internal endpoint used to update metadata for an integration.
 * UpdateIntegrationMetadata is used to update which hub connectors are in use by the integration.
 * This will only be called from switchboard-api.
 *
 */
export const updateIntegrationMetadata = <ThrowOnError extends boolean = false>(
    options: Options<UpdateIntegrationMetadataData, ThrowOnError>
) => {
    return (options?.client ?? client).put<
        UpdateIntegrationMetadataResponse,
        UpdateIntegrationMetadataError,
        ThrowOnError
    >({
        ...options,
        url: '/integrations/{integration_id}/metadata',
    });
};

/**
 * Retrieve an End User Connection, used in sb-actions to get credentials for an end user.
 * GetEndUserConnection returns the Connection for the given ID.
 *
 */
export const getEndUserConnection = <ThrowOnError extends boolean = false>(
    options: Options<GetEndUserConnectionData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetEndUserConnectionResponse, GetEndUserConnectionError, ThrowOnError>({
        ...options,
        url: '/connection-templates/{connection_template_id}/users/{user_id}',
    });
};

/**
 * List End User Integrations
 * ListEndUserIntegrations returns all integrations which are available to the given End User.
 *
 * This API should be used to populate the embedded UI with the integrations that the end user can activate.
 *
 * If the `user_id` is referencing the external ID of the user, then the `hub` query parameter is required in order
 * to identify the correct Hub to retrieve the integrations from.
 *
 */
export const listEndUserIntegrations = <ThrowOnError extends boolean = false>(
    options: Options<ListEndUserIntegrationsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<ListEndUserIntegrationsResponse, ListEndUserIntegrationsError, ThrowOnError>(
        {
            ...options,
            url: '/embed/{hub_id}/users/{user_id}/integrations',
        }
    );
};

/**
 * Retrieve an Embedded Integration
 * GetEmbeddedIntegration returns the Integration for the given ID to be displayed to the user in the embedded UI.
 *
 */
export const getEmbeddedIntegration = <ThrowOnError extends boolean = false>(
    options: Options<GetEmbeddedIntegrationData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetEmbeddedIntegrationResponse, GetEmbeddedIntegrationError, ThrowOnError>({
        ...options,
        url: '/embed/{hub_id}/users/{user_id}/integrations/{integration_id}',
    });
};

/**
 * Initialise OAuth 2.0 Connection
 * InitialiseOAuth2Connection returns a URL to redirect the user to an OAuth 2.0 Provider's Authorize endpoint.
 *
 * Only URLs constructed via this API can be used to connect to an OAuth 2.0 connector within
 * Versori, since a `state` parameter is generated and validated upon redirection to the
 * redirect_uri.
 *
 * Additional query parameters can be added to the resultant URL via the `additionalParams`
 * property in the body. In addition to the standard parameters defined in the body, this API
 * adds the following parameters:
 *
 * - `redirect_uri`: The URI to redirect the user to after the OAuth 2.0 Provider has
 * authenticated the user.
 * - `state`: A secure string generated by the API to authenticate requests to the redirect URI.
 * - `prompt`: See documentation on the `prompt` property of the request body.
 * - `scope`: See documentation on the `scopes` property of the request body.
 * - `response_type`: The response type to use. This is always `code` for OAuth 2.0.
 * - `client_id`: The client ID provided by the request body, this must match the client ID
 * which is stored under the provided `credentialId` otherwise the handling of the redirect
 * request will fail.
 *
 * Full details on the standard parameters can be found in the OIDC Core specification:
 * https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
 *
 */
export const initialiseOauth2EmbeddedConnection = <ThrowOnError extends boolean = false>(
    options: Options<InitialiseOauth2EmbeddedConnectionData, ThrowOnError>
) => {
    return (options?.client ?? client).post<
        InitialiseOauth2EmbeddedConnectionResponse,
        InitialiseOauth2EmbeddedConnectionError,
        ThrowOnError
    >({
        ...options,
        url: '/embed/{hub_id}/connector/{connector_id}/oauth2/initialise',
    });
};

/**
 * List End User Activations
 * ListEndUserActivations returns all activations which are available to the given End User. This API can be
 * filtered to only return activations for a given integration.
 *
 */
export const listEndUserActivations = <ThrowOnError extends boolean = false>(
    options: Options<ListEndUserActivationsData, ThrowOnError>
) => {
    return (options?.client ?? client).get<ListEndUserActivationsResponse, ListEndUserActivationsError, ThrowOnError>({
        ...options,
        url: '/embed/{hub_id}/users/{user_id}/activations',
    });
};

/**
 * Activate Integration
 * ActivateIntegration activates an Integration for an End User. This is the final step in the activation
 * process and will create the necessary connections and configurations to allow the Integration to run.
 *
 * This endpoint can either reference existing connections or create new ones. Once these connections are
 * resolved/created, if there are any missing connections to what the integration requires, an error will be
 * returned.
 *
 */
export const activateIntegration = <ThrowOnError extends boolean = false>(
    options?: Options<ActivateIntegrationData, ThrowOnError>
) => {
    return (options?.client ?? client).post<ActivateIntegrationResponse, ActivateIntegrationError, ThrowOnError>({
        ...options,
        url: '/activations',
    });
};

/**
 * Retrieve an Activation
 * GetActivation returns the Activation for the given ID.
 *
 */
export const getActivation = <ThrowOnError extends boolean = false>(
    options: Options<GetActivationData, ThrowOnError>
) => {
    return (options?.client ?? client).get<GetActivationResponse, GetActivationError, ThrowOnError>({
        ...options,
        url: '/activations/{activation_id}',
    });
};

/**
 * Delete an Activation
 * DeleteActivation deletes the Activation for the given ID.
 *
 */
export const deleteActivation = <ThrowOnError extends boolean = false>(
    options: Options<DeleteActivationData, ThrowOnError>
) => {
    return (options?.client ?? client).delete<DeleteActivationResponse, DeleteActivationError, ThrowOnError>({
        ...options,
        url: '/activations/{activation_id}',
    });
};

/**
 * Health Check
 * HealthCheck returns a successful status if the API is healthy.
 *
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
        ...options,
        url: '/healthz',
    });
};
